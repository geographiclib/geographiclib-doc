// -*- text -*-
/**
 * \file Geographic.doc
 * \brief Documentation for GeographicLib
 *
 * Written by Charles Karney <charles@karney.com> and licensed under the
 * MIT/X11 License.  For more information, see
 * http://geographiclib.sourceforge.net/
 **********************************************************************/
// $Id$
/**
\mainpage Geographic library
\author Charles Karney
<charles@karney.com>
\version 1.12
\date 2011-07-21

\section abstract Abstract

%GeographicLib is a small set of <a href="annotated.html">C++
classes</a> for performing conversions between geographic, UTM, UPS,
MGRS, geocentric, and local cartesian coordinates, for geoid height
calculations, and for solving geodesic problems.  The emphasis is on
returning accurate results with errors close to round-off (about
5&ndash;15 nm).  New accurate algorithms for \ref geodesic and \ref
transversemercator have been developed for this library.
The functionality of the library can be accessed from user code, from
the \ref utilities provided, or via the \ref other.  For a sample of
the geodesic capabilities in Javascript, check out the
<a href="../scripts/geod-calc.html">online geodesic calculator</a> and
the script for displaying
<a href="../scripts/geod-google.html">geodesics in Google Maps</a>

This library is <i>not</i> a general purpose projection library; use
<a href="http://trac.osgeo.org/proj/">proj.4</a> for that.  On the other
hand, it does provide the core functionality offered by
<a href="http://earth-info.nima.mil/GandG/geotrans/">geotrans</a> and it
cures several of the defects of that package.

\section download Download

The main project page is at
- <a href="http://sourceforge.net/projects/geographiclib">
  http://sourceforge.net/projects/geographiclib </a>
.
The code is available for download at
- <a href="http://sf.net/projects/geographiclib/files/distrib/GeographicLib-1.12.tar.gz/download">
  GeographicLib-1.12.tar.gz</a>
- <a href="http://sf.net/projects/geographiclib/files/distrib/GeographicLib-1.12.zip/download">
  GeographicLib-1.12.zip</a>
.
as either a compressed tar file (tar.gz) or a zip file.  (The two archives
have identical contents.)  Alternatively you can get the latest stable release
using git \verbatim
  git clone git://geographiclib.git.sourceforge.net/gitroot/geographiclib/geographiclib-release
  cd geographiclib-release
  git checkout stable
\endverbatim
There is also a binary installer for Windows available at
- <a href="http://sf.net/projects/geographiclib/files/distrib/GeographicLib-1.12-win32.exe/download">
  GeographicLib-1.12-win32.exe</a>
.
It is licensed under the
<a href="http://www.opensource.org/licenses/MIT">MIT/X11 License</a>;
see <a href="LICENSE.txt">LICENSE.txt</a> for the terms.
For more information, see http://geographiclib.sourceforge.net/.  

\section contents Contents
 - \ref intro
 - \ref install
 - \ref start
 - \ref utilities
 - \ref organization
 - \ref other
 - \ref geoid
 - \ref geodesic
   - \ref testgeod
   - \ref geodseries
 - \ref transversemercator
   - \ref testmerc
   - \ref tmseries
 - \ref geocentric
 - \ref old

<center>
Forward to \ref intro.
</center>

**********************************************************************/
/**
\page intro Introduction

<center>
Forward to \ref install.  Up to \ref contents.
</center>

%GeographicLib offers a C++ interfaces to a small (but important!) set
of geographic transformations.  It grew out of a desire to improve on
the <a href="http://earth-info.nima.mil/GandG/geotrans/">geotrans</a>
package for transforming between geographic and MGRS coordinates.  At
present, %GeographicLib provides UTM, UPS, MGRS, geocentric, and local
cartesian projections, geoid heights, and classes for geodesic
calculations.

The goals of %GeographicLib are:
 - Accuracy.  In most applications the accuracy is close to round-off,
   about 5 nm.  Even though in many geographic applications 1 cm is
   considered "accurate enough", there is little penalty in providing
   much better accuracy.  If situations where a faster approximate
   algorithm is necessary, %GeographicLib offers an accurate benchmark to
   guide the development.
 - Completeness.  For each of the projections included, an attempt is
   made to provide a complete solution.  For example,
   GeographicLib::Geodesic::Inverse works for anti-podal points.
   Similarly, GeographicLib::Geocentric.Reverse will return accurate
   geodetic coordinates even for points close to the center of the
   earth.
 - C++ interface.  For the projection methods, this allows encapsulation
   of the ellipsoid parameters.
 - Emphasis on projections necessary for analyzing military data.
 - Uniform treatment of UTM/UPS.  The GeographicLib::UTMUPS class treats
   UPS as zone 0.  This simplifies conversions between UTM and UPS
   coordinates, etc.
 - Well defined and stable conventions for the conversion between
   UTM/UPS to MGRS coordinates.
 - Detailed internal documentation on the algorithms.  For the most part
   %GeographicLib uses published algorithms and references are given.  If
   changes have been made (usually to improve the numerical accuracy),
   these are described in the code.

Various \ref utilities are provided with the library.  These illustrate
the use of the library and are useful in their own right.  This library
and the utilities have been tested with g++ 4.4 under Linux, with g++
4.2 under Mac OS X, and with MS Visual Studio 2008 and 2010.

Matlab, Javascript, and Python interfaces are provided to portions of
%GeographicLib; see \ref other.

The section \ref geodesic documents the method of solving the geodesic
problem.

The section \ref transversemercator documents various properties of this
projection.

Undoubtedly, bugs lurk in this code and in the documentation.  Please
report any you find to <charles@karney.com>.

<center>
Forward to \ref install.  Up to \ref contents.
</center>
**********************************************************************/
/**
\page install Installing %GeographicLib

<center>
Back to \ref intro.  Forward to \ref start.  Up to \ref contents.
</center>

%GeographicLib has been developed under Linux with the g++ compiler (versions
4.0 and later) and under Windows with Visual Studio 2005, 2008, and
2010.  Earlier versions were tested also under Darwin and Solaris.  It
should compile on a wide range of other systems.  First
download either
<a href="http://sourceforge.net/projects/geographiclib/files/distrib/GeographicLib-1.12.tar.gz/download">
GeographicLib-1.12.tar.gz</a> or
<a href="http://sourceforge.net/projects/geographiclib/files/distrib/GeographicLib-1.12.zip/download">
GeographicLib-1.12.zip</a> (or
<a href="http://sourceforge.net/projects/geographiclib/files/distrib/GeographicLib-1.12-win32.exe/download">
GeographicLib-1.12-win32.exe</a> for binary installation under Windows).
Then pick one of the first five options below:
- \ref cmake.  This is the preferred installation method as it will work
  on the widest range of platforms.  However it requires that you have
  <a href="http://www.cmake.org">cmake</a> installed.
- \ref autoconf.  This method works for most Unix-like systems,
  including Linux and Mac OS X.
- \ref gnu.  This is a simple installation method that works with g++
  GNU make on Linux and many Unix platforms.
- \ref windows.  This is a simple installation method that works with
  Visual Studio 2005 and 2008 under Windows.  Use cmake if you use
  Visual Studio 2010.
- \ref windowsbin.  Use this installation method if you only need to the
  the utility programs supplied with %GeographicLib.  (This method also
  installs the header files and the static library for use by Visual
  Studio 2010.)
- \ref maintainer.  This describes addition tasks of interest only to
  the maintainers of this code.
.
This section documents only how to install the software.  If you wish to
use %GeographicLib to evaluate  geoid heights, then you must also
install geoid data files.  See \ref geoidinst for instructions.

\section cmake Installation with cmake

This is the recommended method of installation; however it requires that
<a href="http://www.cmake.org">cmake</a> be installed on your system.
This permits %GeographicLib to be built either as a shared or a static
library on a wide variety of systems.  cmake can also determine the
capabilities of your system and adjust the compilation of the
libraries and examples appropriately.

cmake is available for most computer platforms.  On Linux systems cmake
will typically one of the standard packages and can be installed by a
command like
  \verbatim
  yum install cmake \endverbatim
(executed as root).  On other systems, download a binary
installer from http://www.cmake.org click on download, and save and run
the appropriate installer.  Run the cmake command with no arguments to
get help.  Other useful tools are ccmake and cmake-gui which offer
curses and graphical interfaces to cmake.  Building under cmake depends
on whether it is targeting an IDE (interactive development environment)
or generating Unix-style makefiles.  The instructions below have been
tested with makefiles and g++ on Linux and with the Visual Studio IDE on
Windows.

Here are the steps to compile and install %GeographicLib:
- Unpack the source, running one of \verbatim
  tar xfpz GeographicLib-1.12.tar.gz
  unzip -q GeographicLib-1.12.zip \endverbatim
  then enter the directory created \verbatim
  cd GeographicLib-1.12 \endverbatim
- Create a separate build directory and enter it, for example, \verbatim
  mkdir BUILD
  cd BUILD\endverbatim
- Run cmake, pointing it to the parent directory (..).  On Linux,
  Unix, and MaxOSX systems, the command is \verbatim
  cmake .. \endverbatim
  For Windows, the command is typically one of \verbatim
  cmake -G "Visual Studio 10" ..
  cmake -G "Visual Studio 9 2008" ..
  cmake -G "Visual Studio 8 2005" .. \endverbatim
  If you need to rerun cmake, use \verbatim
  cmake . \endverbatim
  possibly including some options via <code>-D</code> (see the next step).
- cmake allows you to configure how %GeographicLib is built and installed by
  supplying options, for example \verbatim
  cmake -D CMAKE_INSTALL_PREFIX=/tmp/geographic . \endverbatim
  The options you might need to change are
  - <code>CMAKE_INSTALL_PREFIX</code> (default: /usr/local
    on non-Windows systems, C:/Program Files/GeographicLib on Windows
    systems) specifies where the library will be installed.  If you just
    want to try the library to see if it suits your needs, pick
    <code>CMAKE_INSTALL_PREFIX</code>=/tmp/geographic, for example, and set
    <code>GEOGRAPHIC_SHARED_LIB</code>=OFF.
  - <code>GEOGRAPHICLIB_GEOID_PATH</code> (default:
    /usr/local/share/GeographicLib/geoids for non-Windows systems,
    C:/Documents and Settings/All Users/Application
    Data/GeographicLib/geoids for Windows systems) specifies the default
    location for the geoid datasets for use by GeographicLib::Geoid.
    See \ref geoidinst for more information.
  - <code>GEOGRAPHIC_SHARED_LIB</code> (default: ON for
    non-Windows systems, OFF for Windows systems)
    determines whether a shared or static library is built.  The default
    is OFF for Windows because there's no standard place to install the
    dlls.  In addition, on Windows, the tests only work with static
    libraries.
  - <code>CMAKE_BUILD_TYPE</code> (default: Release).  This
    flags only affects non-IDE compile environments (like make + g++).
    The default is actually blank, but this is treated as
    Release.  Choose one of
    \verbatim
  Debug
  Release
  RelWithDebInfo
  MinSizeRel
\endverbatim
    (With IDE compile environments, you get to select the build type in
    the IDE.)
  - <code>ENABLE_MATLAB</code> (default: OFF).  Set this to ON to get
    cmake to try to compile and install the Matlab/Octave interface.  At
    present this is compiled for Matlab under Windows and for Octave
    under Linux.
  - <code>MAINTAINER</code> (default: ON for non-Windows environments
    provided doxygen, pod2man, and pod2html are found).  This affects
    whether the targets for creating source packages are activated.
    See \ref maintainer for details.
- Build and install the software.  In non-IDE environments, run
  \verbatim
  make         # compile the library and the examples
  make test    # run some tests
  make install # as root, if CMAKE_INSTALL_PREFIX is a system directory
\endverbatim
  On IDE environments, run your IDE (e.g., Visual Studio), load
  GeographicLib.sln, pick the build type (e.g., Release), and select "Build
  Solution".  If this succeeds, select "RUN_TESTS" to build.  Finally,
  select "INSTALL" to build.
- The headers, library, and utilities are installed in the
  include/GeographicLib, lib, and bin directories under
  <code>CMAKE_INSTALL_PREFIX</code>.  (dll dynamic libraries are
  installed in bin.)  The Matlab/Octave interface is installed in
  libexec/GeographicLib/matlab.  For documentation, open
  <a href="index.html">
  share/doc/GeographicLib/html/index.html</a> in a web browser.

\section autoconf Installation using the autoconfigure tools

The method works on most Unix-like systems including Linux and Mac OS X.
Here are the steps to compile and install %GeographicLib:
- Unpack the source, running \verbatim
  tar xfpz GeographicLib-1.12.tar.gz \endverbatim
  then enter the directory created \verbatim
  cd GeographicLib-1.12 \endverbatim
- Configure the software with \verbatim
  ./configure \endverbatim
- By default %GeographlicLib will be installed under /usr/local.
  You can change this with, for example \verbatim
  ./configure --prefix=/tmp/geographic \endverbatim
- Compile and install the software with \verbatim
  make
  make install \endverbatim
- The headers, library, and utilities are installed in the
  include/GeographicLib, lib, and bin directories under
  <code>prefix</code>.  This installation method does not compile
  the Matlab/Octave interface;  however the source for the interface is
  installed in libexec/GeographicLib/matlab, see \ref matlab of
  instructions on compiling the interface.  For documentation, open
  <a href="index.html">
  share/doc/GeographicLib/html/index.html</a> in a web browser.

\section gnu Installation with GNU compiler and Make

This method requires the standard GNU suite of tools, in particular make
and g++.  This builds a static library and the examples.

Here are the steps to compile and install %GeographicLib:
- Unpack the source, running \verbatim
  tar xfpz GeographicLib-1.12.tar.gz \endverbatim
  then enter the directory created \verbatim
  cd GeographicLib-1.12 \endverbatim
- Build and install the software: \verbatim
  make             # compile the library and the examples
  make install     # as root \endverbatim
  The installation is in directories under /usr/local.  You
  can specify a different installation directory with, for example,
  \verbatim
  make PREFIX=/tmp/geographic install \endverbatim
- The headers, library, and utilities are installed in the
  include/GeographicLib, lib, and bin directories under
  <code>PREFIX</code>.  This installation method does not compile
  the Matlab/Octave interface;  however the source for the interface is
  installed in libexec/GeographicLib/matlab, see \ref matlab of
  instructions on compiling the interface.  For documentation, open
  <a href="index.html">
  share/doc/GeographicLib/html/index.html</a> in a web browser.

\section windows Installation on Windows

This method requires Visual Studio 2008 (or 2005).  This builds a static
library and the examples.  If you only have Visual Studio 2010, use
cmake to create the necessary solution file.  %GeographicLib does not
compile correctly with Visual Studio 2003.
- Unpack the source, running \verbatim
  unzip -q GeographicLib-1.12.zip \endverbatim
- Open GeographicLib-1.12/windows/GeographicLib-vc9.sln in Visual Studio
  2008 (for Visual Studio 2005, replace -vc9 by -vc8).
- Pick the build type (e.g., Release), and select "Build
  Solution".
- The library and the compiled examples are in the
  windows/Release.
- Copy the library windows/Release/Geographic.lib and the
  headers in include/GeographicLib somewhere convenient.  The
  headers should remain in a directory named %GeographicLib.  If you
  expect to use the Matlab/Octave interface, copy matlab/*.m and
  matlab/*.cpp to a directory in your matlab/octave path, see \ref
  matlab for instructions on compiling the interface.  For documentation,
  open
  <a href="index.html">doc/html/index.html</a> in a web
  browser.

\section windowsbin Using a binary installer for Windows.

Download and run
<a href="http://sourceforge.net/projects/geographiclib/files/distrib/GeographicLib-1.12-win32.exe/download">
GeographicLib-1.12-win32.exe</a>:
 - read the MIT/X11 License agreement,
 - select whether you want your PATH modified,
 - select the destination folder, by default
   C:/Program Files/GeographicLib-1.12.
 - select the start menu folder,
 - and install.
 .
The start menu will now include links to the documentation for the
library and for the utilities (and a link for uninstalling the library).
If you ask for your PATH to be modified, it will include
C:/Program Files/GeographicLib-1.12/bin where the utilities are
installed.  The headers and library are installed in the
include/GeographicLib and lib folders.  The Matlab interface is
installed in the libexec/GeographicLib/matlab folder.  Add this to your
path in Matlab to access this interface.  The binaries were built using
Visual Studio 10 (2010) for Win32 in Release mode.  The Matlab interface
was compiled with Matlab R2010b, however it works with some other
versions of Matlab (e.g., R2008a).

\section maintainer Maintainer tasks

Check the code out of git with \verbatim
  git clone git://geographiclib.git.sourceforge.net/gitroot/geographiclib/geographiclib
\endverbatim
The autoconf configuration script, the html version of the
documentation, and the formatted man pages not checked into git.  In
order to create the autoconf configuration script, run \verbatim
  sh autogen.sh \endverbatim
in the top level directory.  Provided you are running on a system with
doxygen, pod2man, and pod2html installed, then you can create the
documentation and the man pages by building the system using cmake (the
<code>MAINTAINER</code> configuration variable set to ON, if the
necessary tools are found) or configure.   In the
case of cmake, you must in addition run \verbatim
  make dist \endverbatim
which will copy the documentation and man pages from the build directory
back into the source tree and package the resulting source tree for
distribution as
\verbatim
  GeographicLib-1.12.tar.gz
  GeographicLib-1.12.zip \endverbatim
Finally, \verbatim
  make package \endverbatim
or building PACKAGE in Visual Studio will create a binary installer for
%GeographicLib.  For Windows, this requires in the installation of
<a href="http://nsis.sourceforge.net">NSIS</a>.

<center>
Back to \ref intro.  Forward to \ref start.  Up to \ref contents.
</center>
**********************************************************************/
/**
\page start Getting started

<center>
Back to \ref install.  Forward to \ref utilities.  Up to \ref contents.
</center>

Much (but not all!) of the useful functionality of %GeographicLib is
available via simple command line utilities.  Interfaces to some of them
are available via the web.  See \ref utilities for documentation on
these.

In order to use %GeographicLib from C++ code, you will need to
- Include the header files for the %GeographicLib classes in your code.
  E.g., \code
  #include <GeographicLib/LambertConformalConic.hpp> \endcode
- Include the GeographicLib:: namespace prefix to the %GeographicLib classes,
  or include \code
  using namespace GeographicLib; \endcode
  in your code.
- Tell the compiler where to find the header files.  With g++ and with
  /usr/local specified as the installation directory,
  this is accomplished with \verbatim
  g++ -c -g -O3 -I/usr/local/include testprogram.cpp
\endverbatim
  With Visual Studio, specify the include directory in the IDE via,
  e.g.,
  \verbatim
C/C++ -> General -> Additional Include Directories = C:\Program Files\GeographicLib\include
\endverbatim
- Tell the linker the name, Geographic, and location of the
  library.  Using g++ as the linker, you would use \verbatim
  g++ -g -o testprogram testprogram.o -L/usr/local/lib -lGeographic
\endverbatim
  With Visual Studio, you supply this information in the IDE via,
  e.g.,
  \verbatim
Linker -> Input -> Additional Dependencies = Geographic.lib
Linker -> General -> Additional Library Directories = C:\Program Files\GeographicLib\include
\endverbatim
  Note that the library name is <b>Geographic</b> and not %GeographicLib.
- Tell the runtime environment where to find the shared library
  (assuming you compiled %GeographicLib as a shared library).  With g++,
  this is accomplished by modifying the link line above to read \verbatim
  g++ -g -o testprogram testprogram.o -Wl,-rpath=/usr/local/lib -L/usr/local/lib -lGeographic
\endverbatim
  (There are two other ways to specify the location of shared libraries
  at runtime: (1) define the environment variable
  <code>LD_LIBRARY_PATH</code> to be a colon-separated list of
  directories to search; (2) as <b>root</b>, specify /usr/local/lib as a
  directory searched by ldconfig(8).)  On Windows, you need to ensure
  that Geographic.dll is in the same directory as your executable or
  else include the directory containing the dll in your
  <code>PATH</code>.
- For Windows, ensure that you build the library with the same version
  of the compiler and you use for your code.  In addition, you have
  to build a separate debug version of the library when you can
  compiling your code in debug mode.

Here is a very simple test code, which convert the point 38.95N 75.17W
(Philadelphia) to the Pennsylvania South coordinate system:
\code
#include <iostream>
#include <iomanip>

#include <GeographicLib/Constants.hpp>
#include <GeographicLib/DMS.hpp>
#include <GeographicLib/LambertConformalConic.hpp>

int main() {
  using namespace GeographicLib;
  double 
    // These are the constants for Pennsylvania South, EPSG:3364
    // http://www.spatialreference.org/ref/epsg/3364/
    a = Constants::WGS84_a(),   // major radius
    f = 1/298.257222101,        // flattening (GRS80)
    lat1 = DMS::Decode(40,58),  // standard parallel 1
    lat2 = DMS::Decode(39,56),  // standard parallel 2
    k1 = 1,                     // scale on std parallels
    lat0 =  DMS::Decode(39,20), // latitude of origin
    lon0 = -DMS::Decode(77,45), // longitude of origin
    fe = 600000,                // false easting
    fn = 0;                     // false northing
  LambertConformalConic PASouth(a, f, lat1, lat2, k1);
  double x0, y0;
  PASouth.Forward(lon0, lat0, lon0, x0, y0); // Transform origin point
  x0 -= fe; y0 -= fn;           // Combine result with false origin

  double lat = 39.95, lon = -75.17;    // Philadelphia
  double x, y;
  PASouth.Forward(lon0, lat, lon, x, y);
  x -= x0; y -= y0;             // Philadelphia in PA South coordinates

  std::cout << std::fixed << std::setprecision(3)
            << x << " " << y << "\n";
  return 0;
}
\endcode
If you copy this code to testprogram.cpp, and compile, link, and run it
according to the instructions above, it should print out \verbatim
  820444.831 71691.798
\endverbatim

The next steps are:
 - Learn about and run the \ref utilities.
 - Read the section, \ref organization, for an overview of the library.
 - Browse the <a href="annotated.html">Class List</a> for full documentation
   on the classes in the library.
 - Look at the source code for the utilities in the tools directory for
   more examples of using %GeographicLib from C++ code, e.g.,
   GeodesicProj.cpp is a program to performing various geodesic
   projections.

Here's a list of some of the abbreviations used here with links to the
corresponding Wikipedia articles:
 - <a href="http://en.wikipedia.org/wiki/WGS84">
   WGS84</a>, World Geodetic System 1984.
 - <a href="http://en.wikipedia.org/wiki/Universal_Transverse_Mercator_coordinate_system">
   UTM</a>, Universal Transverse Mercator coordinate system.
 - <a href="http://en.wikipedia.org/wiki/Universal_Polar_Stereographic">
   UPS</a>, Universal Polar Stereographic coordinate system.
 - <a href="http://en.wikipedia.org/wiki/Military_grid_reference_system">
   MGRS</a>, Military Grid Reference System.
 - <a href="http://en.wikipedia.org/wiki/Geoid">
   EGM</a>, Earth Gravity Model.

<center>
Back to \ref install.  Forward to \ref utilities.  Up to \ref contents.
</center>
**********************************************************************/
/**
\page utilities Utility Programs

<center>
Back to \ref start.  Forward to \ref organization.  Up to \ref contents.
</center>

Various utility programs are provided with %GeographicLib.  These should
be installed in a directory included in your PATH (e.g.,
/usr/local/bin).  These programs are wrapper programs that invoke
the underlying functionality provided by the library.

The utlilities are
 - <a href="GeoConvert.1.html">
   <b>GeoConvert</b></a>: convert geographic coordinates using
   GeographicLib::GeoCoords.
 - <a href="Geod.1.html">
   <b>Geod</b></a>: perform geodesic calculations using
   GeographicLib::Geodesic and GeographicLib::GeodesicLine.
 - <a href="Planimeter.1.html">
   <b>Planimeter</b></a>: compute the area of geodesic polygons using
   the area facilities provided by GeographicLib::Geodesic.
 - <a href="TransverseMercatorProj.1.html">
   <b>TransverseMercatorProj</b></a>: convert between geographic
   and transverse Mercator.  This is for testing
   GeographicLib::TransverseMercatorExact and
   GeographicLib::TransverseMercator.
 - <a href="CartConvert.1.html">
   <b>CartConvert</b></a>: convert geodetic coordinates to geocentric or
   local cartesian using GeographicLib::Geocentric and
   GeographicLib::LocalCartesian.
 - <a href="GeodesicProj.1.html">
   <b>GeodesicProj</b></a>: perform projections based on geodesics
   using GeographicLib::AzimuthalEquidistant, GeographicLib::Gnomonic,
   and GeographicLib::CassiniSoldner.
 - <a href="ConicProj.1.html">
   <b>ConicProj</b></a>: perform conic projections using
   GeographicLib::LambertConformalConic and
   GeographicLib::AlbersEqualArea.
 - <a href="GeoidEval.1.html">
   <b>GeoidEval</b></a>: look up geoid heights using
   GeographicLib::Geoid.
 .
The documentation for these utilities is in the form of man pages.  This
documentation can be accessed by clicking on the utility name in the
list above, running the man command on Unix-like systems, or by invoking
the utility with the --help option.  A brief summary of usage is given
by invoking the utility with the -h option.  The version of the utility
is given by the --version option.

The utilities all accept data on standard input, transform it in some
way, and print the results on standard output.  This makes the utilities
easy to use within scripts to transform tabular data; however they can
also be used interactively, often with the input supplied via a pipe,
e.g.,
 - echo 38SMB4488 | GeoConvert -d

Online versions of three of these utilities are provided:
 - <a href="http://geographiclib.sf.net/cgi-bin/GeoConvert">GeoConvert</a>
 - <a href="http://geographiclib.sf.net/cgi-bin/Geod">Geod</a>
 - <a href="http://geographiclib.sf.net/cgi-bin/Planimeter">Planimeter</a>
 - <a href="http://geographiclib.sf.net/cgi-bin/GeoidEval">GeoidEval</a>

<center>
Back to \ref start.  Forward to \ref organization.  Up to \ref contents.
</center>
**********************************************************************/
/**
\page organization Code organization

<center>
Back to \ref utilities.  Forward to \ref other.  Up to \ref contents.
</center>

Here is a brief description of the relationship between the various
components of %GeographicLib.  All of these are defined in the
GeographicLib namespace.

GeographicLib::TransverseMercator, GeographicLib::PolarStereographic,
GeographicLib::LambertConformalConic, and GeographicLib::AlbersEqualArea
provide the basic projections.  The constructors for these classes
specify the ellipsoid and the forward and reverse projections are
implemented as const member functions.  TransverseMercator uses
Kr&uuml;ger's series which have been extended to sixth order in the
square of the eccentricity.  PolarStereographic, LambertConformalConic,
and AlbersEqualArea use the exact formulas for the projections (e.g.,
from Snyder).

GeographicLib::TransverseMercator::UTM and
GeographicLib::PolarStereographic::UPS are const static instantiations
specific for the WGS84 ellipsoid with the UTM and UPS scale factors.
(These do \e not add the standard false eastings or false northings for
UTM and UPS.)  Similarly GeographicLib::LambertConformalConic::Mercator
is a const static instantiation of this projection for a WGS84 ellipsoid
and a standard parallel of 0 (which gives the Mercator projection).
GeographicLib::AlbersEqualArea::CylindricalEqualArea,
AzimuthalEqualAreaNorth, and AzimuthalEqualAreaSouth, likewise provide
special cases of the equal area projection.

GeographicLib::UTMUPS uses TransverseMercator::UTM and
PolarStereographic::UPS to perform the UTM and UPS
projections.  The class offers a uniform interface to UTM and UPS by
treating UPS as UTM zone 0.  This class stores no internal state and the
forward and reverse projections are provided via static member
functions.  The forward projection offers the ability to override the
standard UTM/UPS choice and the UTM zone.

GeographicLib::MGRS transforms between UTM/UPS coordinates and MGRS.
UPS coordinates are handled as UTM zone 0.  This class stores no
internal state and the forward (UTM/UPS to MGRS) and reverse (MGRS to
UTM/UPS) conversions are provided via static member functions.

GeographicLib::GeoCoords holds a single geographic location which may be
specified as latitude and longitude, UTM or UPS, or MGRS.  Member
functions are provided to convert between coordinate systems and to
provide formatted representations of them.
<a href="GeoConvert.1.html">GeoConvert</a> is a simple command line
utility to provide access to the GeoCoords class.

GeographicLib::TransverseMercatorExact is a drop in replacement for
TransverseMercator which uses the exact formulas, based on elliptic
functions, for the projection as given by Lee.
<a href="TransverseMercatorProj.1.html">TransverseMercatorProj</a> is a
simple command line utility to test to the TransverseMercator and
TransverseMercatorExact.

GeographicLib::Geodesic and GeographicLib::GeodesicLine perform geodesic
calculations.  The constructor for GeographicLib::Geodesic specifies the
ellipsoid and the direct and inverse calculations are implemented as
const member functions.  GeographicLib::Geocentric::WGS84 is a const
static instantiation of Geodesic specific for the WGS84 ellipsoid.  In
order to perform a series of direct geodesic calculations on a single
line, the GeographicLib::GeodesicLine class can be used.  This packages
all the information needed to specify a geodesic.  A const member
function returns the coordinates a specified distance from the starting
point.  <a href="Geod.1.html">Geod</a> is a simple command line utility
to perform geodesic calculations.  GeographicLib::PolygonArea is a class
which compute the area of geodesic polygons using the Geodesic class and
<a href="Planimeter.1.html">Geod</a> is a command line utility for the
same purpose.
GeographicLib::AzimuthalEquidistant, GeographicLib::CassiniSoldner, and
GeographicLib::Gnomonic are projections based on the Geodesic class.
<a href="GeodesicProj.1.html">GeodesicProj</a> is a command line utility
to exercise these projections.

GeographicLib::Geocentric and GeographicLib::LocalCartesian convert between
geodetic and geocentric or a local cartesian system.  The constructor for
specifies the ellipsoid and the forward and reverse projections are
implemented as const member functions.  GeographicLib::Geocentric::WGS84 is a
const static instantiation of Geocentric specific for the WGS84 ellipsoid.
<a href="CartConvert.1.html">CartConvert</a> is a simple command line
utility to provide access to these classes.

GeographicLib::Geoid evaluates geoid heights by interpolation.  This is
provided by the operator() member function.
<a href="GeoidEval.1.html">GeoidEval</a> is a simple command line
utility to provide access to this class.  This class requires
installation of data files for the various geoid models; see \ref
geoidinst for details.

GeographicLib::Constants, GeographicLib::Math, GeographicLib::DMS, and
GeographicLib::EllipticFunction, GeographicLib::Accumulator are utility
classes which are used internally by the library.  One important
definition is GeographicLib::Math::real which is the type used for
real numbers.  This allows the library to be easily switched to using
floats, doubles, or long doubles.  However all the testing has been with
real set to double and the library should be installed in this way.

In general, the constructors for the classes in %GeographicLib check
their arguments and throw GeographicLib::GeographicErr exceptions with a
explanatory message if these are illegal.  The member functions, e.g.,
the projections implemented by TransverseMercator and
PolarStereographic, the solutions to the geodesic problem, etc.,
typically do <i>not</i> check their arguments; the calling program
should ensure that the arguments are legitimate.  However, the functions
implemented by UTMUPS, MGRS, and GeoCoords do check their arguments and
may throw GeographicLib::GeographicErr exceptions.  Similarly Geoid may
throw exceptions on file errors.  If a function does throw an exception,
then the function arguments used for return values will not be altered.

%GeographicLib attempts to act sensibly with NaNs.  NaNs in constructors
typically throw errors (an exception is GeodesicLine).  However, calling
the class functions with NaNs as arguments is not an error; NaNs are
returned as appropriate.  "INV" is treated as an invalid zone
designation by UTMUPS.  "INVALID" is the corresponding invalid MGRS
string.  NaNs allow the projection of polylines which are separated by
NaNs; in this format they can be easily plotted in Matlab.

A note about portability.  For the most part, the code uses standard C++
and should be able to be deployed on any system with a modern C++
compiler.  System dependencies come into
 - GeographicLib::Math -- GeographicLib needs to define functions such
   as atanh for systems that lack them.  The system dependence will
   disappear with the adoption of C++0x because the needed functions are
   part of that standard.
 - use of long double -- the type is used only for testing.  On systems
   which lack this data type the cmake and autoconf configuration
   methods should detect its absence and omit the code that depends on
   it.
 - GeographicLib::Geoid -- this class uses a system-dependent default
   path for looking up geoid datasets.  It also relies on getenv to find
   the value of the environment variables

<center>
Back to \ref utilities.  Forward to \ref other.  Up to \ref contents.
</center>
**********************************************************************/
/**
\page other Other interfaces (Javascript, Python, Matlab, Octave)

<center>
Back to \ref organization.  Forward to \ref geoid.  Up to \ref contents.
</center>

- \ref javascript.
- \ref python.
- \ref matlab.

\section javascript Javascript interface

The directory doc/scripts/GeographicLib contains the core geodesic
functionality translated into Javascript.  See Interface.js for a simple
Javascript interface to these routines (documented near the top of the
file).  Examples of using this interface are
- a <a href="../scripts/geod-calc.html">geodesic calculator</a> showing
  the solution of direct and inverse geodesic problem, finding
  intermediate points on a geodesic line, and computing the area of a
  geodesic polygon.
- <a href="../scripts/geod-google.html">displaying geodesics in Google
  Maps</a> which shows the geodesic, the geodesic circle, and various
  geodesic envelopes.

\section python Python interface

The file python/GeographicLib.py (which is installed as
PREFIX/share/GeographicLib/python) contains the core geodesic
functionality translated into Python.  An example of using this
interface is
\code
>>> import sys
>>> sys.path.append("/usr/local/share/GeographicLib/python");
>>> from GeographicLib import Geodesic, GeodesicLine
>>> help(Geodesic.__init__)
>>> help(Geodesic.Inverse)
>>> help(Geodesic.Direct)
>>> help(Geodesic.Line)
>>> help(Geodesic.Area)
>>> help(GeodesicLine.Position)
>>> Geodesic.WGS84.Inverse(-41.32, 174.81, 40.96, -5.50)
>>> Geodesic.WGS84.Direct(40.6, -73.8, 45, 10000e3)
>>> line = Geodesic.WGS84.Line(40.6, -73.8, 45)
>>> line.Position(10000e3)
>>> def p(lat,lon): return {'lat': lat,'lon': lon}
...
>>> Geodesic.WGS84.Area([p(0, 0), p(0, 90), p(90, 0)])
\endcode

\section matlab Matlab and Octave interfaces

The matlab directory contains interface code so that some %GeographicLib
classes can be accessed from Matlab or Octave.  If you set
ENABLE_MATLAB=ON when installing with cmake, this interface is built.
Similarly the binary installer for Windows includes the compiled
interface (compiled using Visual Studio 10 and Matlab R2010b).  To use
either of these, run one of (for example) \verbatim
  addpath /usr/local/libexec/GeographicLib/matlab
  addpath 'C:/Program Files/GeographicLib-1.12/libexec/GeographicLib/matlab'
\endverbatim
in Matlab or Octave.  If you need to compile the interface or to
recompile it for a different platform, start Matlab or Octave and run,
e.g., \code
  mex -setup
  cd  'C:/Program Files/GeographicLib-1.12/libexec/GeographicLib/matlab'
  help geographiclibinterface
  geographiclibinterface('C:/Program Files/GeographicLib-1.12');
  addpath(pwd);
\endcode
The first command allows you to select the compiler to use (which
probably should be the same as that used to compile %GeographicLib).
The available functions are:
 - geodesicdirect: solve direct geodesic problem
   (see GeographicLib::Geodesic::Direct)
 - geodesicinverse: solve inverse geodesic problem
   (see GeographicLib::Geodesic::Inverse)
 - geodesicline: compute points along a geodesic
   (see GeographicLib::GeodesicLine::Position)
 - polygonarea: compute area of a geodesic polygon
   (see GeographicLib::PolygonArea)
 - utmupsforward: convert geographic coordinates to UTM/UPS
   (see GeographicLib::UTMUPS::Forward)
 - utmupsreverse: convert UTM/UPS coordinates to geographic
   (see GeographicLib::UTMUPS::Reverse)
 - mgrsforward: convert UTM/UPS coordinates to MGRS
   (see GeographicLib::MGRS::Forward)
 - mgrsreverse: convert MGRS coordinates to UTM/UPS
   (see GeographicLib::MGRS::Reverse)
 - geoidheight: compute geoid height
   (see GeographicLib::Geoid::operator()())
 - geocentricforward: convert geographic coordinates to geocentric
   (see GeographicLib::Geocentric::Forward)
 - geocentricreverse: convert geocentric coordinates to geographic
   (see GeographicLib::Geocentric::Reverse)
 - localcartesianforward: convert geographic coordinates to local cartesian
   (see GeographicLib::LocalCartesian::Forward)
 - localcartesianreverse: convert local cartesian coordinates to geographic
   (see GeographicLib::LocalCartesian::Reverse)
 .
These routines just offer a simple interface to the corresponding C++
class.  Use the help function to get documentation, e.g., \code
  help geodesicdirect \endcode
Unfortunately, the help function does not work for compiled functions in
Octave; in this case, just list the .m file, e.g., \code
  type geodesicdirect \endcode
Other useful functions, e.g., to convert from geographic
coordinates to MGRS can easily be written with Matlab code.

Note that geoidheight, when compiled with Visual Studio 2008 causes
Matlab to crash.  (The problem does not occur with Visual Studio 2005 or
Visual Studio 2010.)

<center>
Back to \ref organization.  Forward to \ref geoid.  Up to \ref contents.
</center>
**********************************************************************/
/**
\page geoid Geoid height

<center>
Back to \ref other.  Forward to \ref geodesic.  Up to \ref contents.
</center>

The gravitational equipotential surface approximately coinciding with
mean sea level is called the geoid.  The GeographicLib::Geoid class and
the <a href="GeoidEval.1.html">GeoidEval</a> utility evaluate the height
of the geoid above the WGS84 ellipsoid.  This can be used to convert
heights above mean sea level to heights above the WGS84 ellipsoid.
Because the normal to the ellipsoid differs from the normal to the geoid
(the direction of a plumb line) there is a slight ambiguity in the
measurement of heights; however for heights up to 10km this ambiguity is
only 1mm.

The geoid is usually approximated by an "earth gravity model" (EGM).
The models published by the NGA are:
- EGM84:
  http://earth-info.nga.mil/GandG/wgs84/gravitymod/wgs84_180/wgs84_180.html
- EGM96:
  http://earth-info.nga.mil/GandG/wgs84/gravitymod/egm96/egm96.html
- EGM2008:
  http://earth-info.nga.mil/GandG/wgs84/gravitymod/egm2008
.
GeographicLib::Geoid offers a uniform way to handle all 3 geoids at a
variety of grid resolutions.  (In contrast, the software tools that NGA
offers are different for each geoid, and the interpolation programs are
different for each grid resolution.  In addition these tools are written
in Fortran with is nowadays difficult to integrate with other software.)

Unlike other components of %GeographicLib, there is a appreciable error
in the results obtained (at best, the RMS error is 1mm).  However the
class provides methods to report the maximum and RMS errors in the
results.  The class also returns the gradient of the geoid.  This can be
used to estimate the direction of a plumb line relative to the WGS84
ellipsoid.

Go to
 - \ref geoidinst
 - \ref geoidformat
 - \ref geoidinterp
 - \ref geoidcache
 - \ref testgeoid

\section geoidinst Installing the geoid datasets

The geoid heights are computed using interpolation into a rectangular
grid.  The grids are read from data files which have been are computed
using the NGA synthesis programs in the case of the EGM84 and EGM96
models and using the NGA binary gridded data files in the case of
EGM2008.  These data files are available for download:

<center>
<table>
<caption>Available geoid data files</caption>
<tr>
 <th rowspan="2">name         <th rowspan="2">geoid    <th rowspan="2">grid
 <th rowspan="2">size\n(MB)
 <th colspan="3"><center>Download Links (size, MB)</center></th>
<tr>
 <th>tar file</th>
 <th>Windows\n installer</th>
 <th>zip file</th>
<tr>
 <td>egm84-30
 <td>EGM84
 <td><center>30'</center>
 <td><center>0.6</center>
 <td><center>
 <a href="http://sf.net/projects/geographiclib/files/geoids-distrib/egm84-30.tar.bz2/download">
 link</a> (0.5)</center>
 <td><center>
 <a href="http://sf.net/projects/geographiclib/files/geoids-distrib/egm84-30.exe/download">
 link</a> (0.8)</center>
 <td><center>
 <a href="http://sf.net/projects/geographiclib/files/geoids-distrib/egm84-30.zip/download">
 link</a> (0.5)</center>
<tr>
 <td>egm84-15
 <td>EGM84
 <td><center>15'</center>
 <td><center>2.1</center>
 <td><center>
 <a href="http://sf.net/projects/geographiclib/files/geoids-distrib/egm84-15.tar.bz2/download">
 link</a> (1.5)</center>
 <td><center>
 <a href="http://sf.net/projects/geographiclib/files/geoids-distrib/egm84-15.exe/download">
 link</a> (1.9)</center>
 <td><center>
 <a href="http://sf.net/projects/geographiclib/files/geoids-distrib/egm84-15.zip/download">
 link</a> (2.0)</center>
<tr>
 <td>egm96-15
 <td>EGM96
 <td><center>15'</center>
 <td><center>2.1</center>
 <td><center>
 <a href="http://sf.net/projects/geographiclib/files/geoids-distrib/egm96-15.tar.bz2/download">
 link</a> (1.5)</center>
 <td><center>
 <a href="http://sf.net/projects/geographiclib/files/geoids-distrib/egm96-15.exe/download">
 link</a> (1.9)</center>
 <td><center>
 <a href="http://sf.net/projects/geographiclib/files/geoids-distrib/egm96-15.zip/download">
 link</a> (2.0)</center>
<tr>
 <td>egm96-5
 <td>EGM96
 <td><center>5'</center>
 <td><center> 19</center>
 <td><center>
 <a href="http://sf.net/projects/geographiclib/files/geoids-distrib/egm96-5.tar.bz2/download">
 link</a> (11)</center>
 <td><center>
 <a href="http://sf.net/projects/geographiclib/files/geoids-distrib/egm96-5.exe/download">
 link</a> (11)</center>
 <td><center>
 <a href="http://sf.net/projects/geographiclib/files/geoids-distrib/egm96-5.zip/download">
 link</a> (17)</center>
<tr>
 <td>egm2008-5
 <td>EGM2008
 <td><center>5'</center>
 <td><center> 19</center>
 <td><center>
 <a href="http://sf.net/projects/geographiclib/files/geoids-distrib/egm2008-5.tar.bz2/download">
 link</a> (11)</center>
 <td><center>
 <a href="http://sf.net/projects/geographiclib/files/geoids-distrib/egm2008-5.exe/download">
 link</a> (11)</center>
 <td><center>
 <a href="http://sf.net/projects/geographiclib/files/geoids-distrib/egm2008-5.zip/download">
 link</a> (17)</center>
<tr>
 <td>egm2008-2_5
 <td>EGM2008
 <td><center>2.5'</center>
 <td><center> 75</center>
 <td><center>
 <a href="http://sf.net/projects/geographiclib/files/geoids-distrib/egm2008-2_5.tar.bz2/download">
 link</a> (35)</center>
 <td><center>
 <a href="http://sf.net/projects/geographiclib/files/geoids-distrib/egm2008-2_5.exe/download">
 link</a> (33)</center>
 <td><center>
 <a href="http://sf.net/projects/geographiclib/files/geoids-distrib/egm2008-2_5.zip/download">
 link</a> (65)</center>
<tr>
 <td>egm2008-1
 <td>EGM2008
 <td><center>1'</center>
 <td><center>470</center>
 <td><center>
 <a href="http://sf.net/projects/geographiclib/files/geoids-distrib/egm2008-1.tar.bz2/download">
 link</a> (170)</center>
 <td><center>
 <a href="http://sf.net/projects/geographiclib/files/geoids-distrib/egm2008-1.exe/download">
 link</a> (130)</center>
 <td><center>
 <a href="http://sf.net/projects/geographiclib/files/geoids-distrib/egm2008-1.zip/download">
 link</a> (390)</center>
</table>
</center>
The "size" column is the size of the uncompressed data and it also
gives the memory requirements for caching the entire dataset using the
GeographicLib::Geoid::CacheAll method.
At a minimum you should install egm96-5 and either egm2008-1 or
egm2008-2_5.  Many applications use the EGM96 geoid, however the use of
EGM2008 is growing. (EGM84 is rarely used now.)

For Linux and Unix systems, %GeographicLib provides a shell script
geographiclib-get-geoids (typically installed in /usr/local/sbin) which
automates the process of downloading and installing the geoid data.  For
example
\verbatim
   geographiclib-get-geoids best # to install egm84-15, egm96-5, egm2008-1
   geographiclib-get-geoids -h   # for help
\endverbatim
This script should be run as a user with write access to the
installation directory, which is typically
/usr/local/share/GeographicLib (this can be overridden with the -p
flag), and the data will then be placed in the "geoids" subdirectory.

Windows users should download and run the Windows installers.  These
will prompt for an installation directory with the default being
\verbatim
   C:/Documents and Settings/All Users/Application Data/GeographicLib
\endverbatim
(which you probably should not change) and the data is installed in the
"geoids" sub-directory.

Otherwise download \e either the tar.bz2 file \e or the zip file (they
have the same contents).  If possible use the tar.bz2 files, since these
are compressed about 2 times better than the zip file.  To unpack these,
run, for example
\verbatim
   mkdir -p /usr/local/share/GeographicLib
   tar xofjC egm96-5.tar.bz2 /usr/local/share/GeographicLib
   tar xofjC egm2008-2_5.tar.bz2 /usr/local/share/GeographicLib
   etc.
\endverbatim
and, again, the data will be placed in the "geoids" subdirectory.

However you install the geoid data, all the datasets should
be installed in the same directory.  GeographicLib::Geoid and
<a href="GeoidEval.1.html">GeoidEval</a> uses a compile time default to
locate the datasets.  This is
- /usr/local/share/GeographicLib/geoids, for non-Windows systems
- C:/Documents and Settings/All Users/Application Data/GeographicLib/geoids,
  for Windows systems
.
consistent with the examples above.  This may be overridden at run-time
by defining the GEOID_PATH environment variable.  Finally, the path may
be set using the optional second argument to the
GeographicLib::Geoid constructor or with the "-d" flag to 
<a href="GeoidEval.1.html">GeoidEval</a>.  Supplying the "-h" flag to
<a href="GeoidEval.1.html">GeoidEval</a> reports the default geoid
path for that utility.  The "-v" flag causes GeoidEval to report the
full path name of the data file it uses.

\section geoidformat The format of the geoid data files

The gridded data used by the GeographicLib::Geoid class is stored in
16-bit PGM files.  Thus the data for egm96-5 might be stored in the file
- /usr/local/share/GeographicLib/geoids/egm96-5.pgm
.
PGM simple graphic format with the following properties
- it is well documented
  <a href="http://netpbm.sf.net/doc/pgm.html">here</a>;
- there are no separate "little-endian" and "big-endian" versions;
- it uses 1 or 2 bytes per pixel;
- pixels can be randomly accessed;
- comments can be added to the file header;
- it is sufficiently simple that it can be easily read without using the
  <a href="http://netpbm.sf.net/doc/libnetpbm.html">libnetpbm</a>
  library (and thus we avoid adding a software dependency to
  %GeographicLib).
.
The major drawback of this format is that since there are only 65535
possible pixel values, the height must be quantized to 3mm.  However,
the resulting quantization error (up to 1.5mm) is typically smaller than
the linear interpolation errors.  The comments in the header for
egm96-5 are
\verbatim
   # Geoid file in PGM format for the GeographicLib::Geoid class
   # Description WGS84 EGM96, 5-minute grid
   # URL http://earth-info.nga.mil/GandG/wgs84/gravitymod/egm96/egm96.html
   # DateTime 2009-08-29 18:45:03
   # MaxBilinearError 0.140
   # RMSBilinearError 0.005
   # MaxCubicError 0.003
   # RMSCubicError 0.001
   # Offset -108
   # Scale 0.003
   # Origin 90N 0E
   # AREA_OR_POINT Point
   # Vertical_Datum WGS84
\endverbatim
Of these lines, the Scale and Offset lines are required and define the
conversion from pixel value to height (in meters) using \e height =
\e offset + \e scale \e pixel.  The Geoid constructor also reads the
Description, DateTime, and error lines (if present) and stores the
resulting data so that it can be returned by
GeographicLib::Geoid::Description, GeographicLib::Geoid::DateTime,
GeographicLib::Geoid::MaxError, and GeographicLib::Geoid::RMSError
methods.  The other lines serve as additional documentation but are not
used by this class.  Accompanying egm96-5.pgm (and similarly with the
other geoid data files) are two files egm96-5.wld and
egm96-5.pgm.aux.xml.  The first is an ESRI "world" file and the second
supplies complete projection metadata for use by
<a href="http://www.gdal.org">GDAL</a>.  Neither of these files is read
by GeographicLib::Geoid.

You can use gdal_translate to convert the data files to a standard
GeoTiff, e.g., with
\verbatim
   gdal_translate -ot Float32 -scale 0 65000 -108 87 egm96-5.pgm egm96-5.tif
\endverbatim
The arguments to -scale here are specific to the Offset and Scale
parameters used in the pgm file (note 65000 * 0.003 - 108 = 87).  You
can check these by running <a href="GeoidEval.1.html">GeoidEval</a> with
the "-v" option.

Here is a sample script which uses GDAL to create a 1-degree
squared grid of geoid heights at 3&quot; resolution (matching DTED1) by
bilinear interpolation.
\verbatim
   #! /bin/sh
   lat=37
   lon=067
   res=3                           # resolution in seconds
   TEMP=`mktemp junkXXXXXXXXXX`    # temporary file for GDAL
   gdalwarp -q -te `echo $lon $lat $res | awk '{
       lon = $1; lat = $2; res = $3;
       printf "%.14f %.14f %.14f %.14f",
           lon  -0.5*res/3600, lat  -0.5*res/3600,
           lon+1+0.5*res/3600, lat+1+0.5*res/3600;
   }'` -ts $((3600/res+1)) $((3600/res+1)) -r bilinear egm96-5.tif $TEMP
   gdal_translate -quiet \
       -mo AREA_OR_POINT=Point \
       -mo Description="WGS84 EGM96, $res-second grid" \
       -mo Vertical_Datum=WGS84 \
       -mo Tie_Point_Location=pixel_corner \
       $TEMP e$lon-n$lat.tif
   rm -f $TEMP
\endverbatim

Because the pgm files are uncompressed, they can take up a lot of room.
Some compressed formats compress in tiles and so might be compatible
with the requirement that the data can be randomly accessed.  In
particular gdal_translate can be used to convert the pgm files to
compressed tiff files with
\verbatim
gdal_translate -co COMPRESS=LZW -co PREDICTOR=2 \
   -co TILED=YES -co BLOCKXSIZE=256 -co BLOCKYSIZE=256 \
   egmyy-g.pgm egmyy-g.tif
\endverbatim
The resulting files sizes are
\verbatim
                  pgm    tif
    egm84-30      0.6M   0.5M
    egm84-15      2.1M   1.4M
    egm96-15      2.1M   1.5M
    egm96-5        19M   8.5M
    egm2008-5      19M   9.8M
    egm2008-2_5    75M    28M
    egm2008-1     470M    97M
\endverbatim
Currently, there are no plans for %GeographicLib to support this
compressed format.

\section geoidinterp Interpolating the geoid data

GeographicLib::Geoid evaluates the geoid height using bilinear or cubic
interpolation.  The gradient of the geoid height is obtained by
differentiating the interpolated height and referencing the result to
distance on the WGS84 ellipsoid.

The bilinear interpolation is based on the values at the 4 corners of
the enclosing cell.  The interpolated height is a continuous function of
position; however the gradient has discontinuities are cell boundaries.
The quantization of the data files exacerbates the errors in the
gradients.

The cubic interpolation is a least-squares fit to the values on a
12-point stencil with weights as follows:
\verbatim
   . 1 1 .
   1 2 2 1
   1 2 2 1
   . 1 1 .
\endverbatim
The cubic is constrained to be independent of longitude when evaluating
the height at one of the poles.  Cubic interpolation is considerably
more accurate than bilinear interpolation; however, in this
implementation there are small discontinuities in the heights are cell
boundaries.  The over-constrained cubic fit slightly reduces the
quantization errors on average.

The algorithm for the least squares fit is taken from, F. H. Lesh,
Multi-dimensional least-squares polynomial curve fitting, CACM 2, 29-30
(1959).  This algorithm is not part of GeographicLib::Geoid; instead it is
implemented as
<a href="http://en.wikipedia.org/wiki/Maxima_(software)">Maxima</a>
code which is used to precompute the matrices to convert the function
values on the stencil into the coefficients from the cubic polynomial.
This code is included as a comment in Geoid.cpp.

The interpolation methods are quick and give good accuracy.  Here is a
summary of the combined quantization and interpolation errors for the
heights.
<center><table>
<caption>Interpolation errors for geoid heights</caption>
<tr>
 <th rowspan="2">name
 <th rowspan="2">geoid
 <th rowspan="2">grid
 <th colspan="2"><center>bilinear error</center></th>
 <th colspan="2"><center>cubic error</center></th>
<tr>
 <th><center>max</center><th><center>rms</center>
 <th><center>max</center><th><center>rms</center>
<tr>
 <td>egm84-30   <td>EGM84  <td><center>30'  </center>
 <td><center>1.546 m</center><td><center>70 mm</center>
 <td><center>0.274 m</center><td><center>14 mm</center>
<tr>
 <td>egm84-15   <td>EGM84  <td><center>15'  </center>
 <td><center>0.413 m</center><td><center>18 mm</center>
 <td><center>0.020 m</center><td><center> 1 mm</center>
<tr>
 <td>egm96-15   <td>EGM96  <td><center>15'  </center>
 <td><center>1.152 m</center><td><center>40 mm</center>
 <td><center>0.169 m</center><td><center> 7 mm</center>
<tr>
 <td>egm96-5    <td>EGM96  <td><center> 5'  </center>
 <td><center>0.140 m</center><td><center> 5 mm</center>
 <td><center>0.003 m</center><td><center> 1 mm</center>
<tr>
 <td>egm2008-5  <td>EGM2008<td><center> 5'  </center>
 <td><center>0.478 m</center><td><center>12 mm</center>
 <td><center>0.294 m</center><td><center> 5 mm</center>
<tr>
 <td>egm2008-2_5<td>EGM2008<td><center> 2.5'</center>
 <td><center>0.135 m</center><td><center> 3 mm</center>
 <td><center>0.031 m</center><td><center> 1 mm</center>
<tr>
 <td>egm2008-1  <td>EGM2008<td><center> 1'  </center>
 <td><center>0.025 m</center><td><center> 1 mm</center>
 <td><center>0.003 m</center><td><center> 1 mm</center>
</table></center>
The errors are with respect the the specific NGA earth gravity model
(not to any "real" geoid).  The RMS values are obtained using 5 million
uniformly distributed random points.  The maximum values are obtained by
evaluating the errors using a different grid with points at or near the
centers of the original grid.  (The RMS difference between EGM96 and
EGM2008 is about 0.5m.  The RMS difference between EGM84 and EGM96 is
about 1.5m.)

\section geoidcache Caching the geoid data

A simple way of calling Geoid is as follows
\code
   #include <GeographicLib/Geoid.hpp>
   #include <iostream>
   ...
   GeographicLib::Geoid g("egm96-5");
   double lat, lon;
   while (std::cin >> lat >> lon)
      std::cout << g(lat, lon) << "\n";
   ...
\endcode

The first call to g(lat, lon) causes the data for the stencil points (4
points for bilinear interpolation and 12 for cubic interpolation) to be
read and the interpolated value returned.  A simple 0th-order caching
scheme is provided by default, so that, if the second and subsequent
points falls within the same grid cell, the data values are not reread
from the file.  This is adequate for most interactive use and also
minimizes disk accesses for the case when a continuous track is being
followed.

If a large quantity of geoid calculations are needed, the calculation
can be sped up by preloading the data for a rectangular block with
GeographicLib::Geoid::CacheArea or the entire dataset with
GeographicLib::Geoid::CacheAll.  If the requested points lie within the
cached area, the cached data values are used; otherwise the data is read
from disk as before.  Caching all the data is a reasonable choice for
the 5' grids and coarser.  Caching all the data for the 1' grid will
require 0.5GB of RAM and should only be used on systems with sufficient
memory.

The use of caching does not affect the values returned.  Because of the
caching and the random file access, this class is \e not normally thread
safe; i.e., a single instantiation cannot be safely used by multiple
threads.  If multiple threads need to calculate geoid heights, there are
two alternatives:
 - they should all construct thread-local instantiations.
 - GeographicLib::Geoid should be constructed with \e threadsafe = true.
   This causes all the data to be read at the time of construction (and
   if this fails, an exception is thrown), the data file to be closed
   and the single-cell caching to be turned off.  The resulting object
   may then be shared safely between threads.

\section testgeoid Test data for geoids

A test set for the geoid models is available at
 - <a href="http://sf.net/projects/geographiclib/files/testdata/GeoidHeights.dat.gz/download">
   GeoidHeight.dat.gz</a>
 .
This is about 10 MB (compressed).  This test set consists of a set of
500000 geographic coordinates together with the corresponding geoid
heights according to various earth gravity models.

Each line of the test set gives 6 space delimited numbers
 - latitude (degrees, exact)
 - longitude (degrees, exact)
 - EGM84 height (meters, accurate to 1 mm)
 - EGM96 height (meters, accurate to 0.1 mm)
 - EGM2008 height (meters, accurate to 1 mm)
 .
The latitude and longitude are all multiples of 10<sup>-6</sup> deg and
should be regarded as exact.  The geoid heights are computed using the
harmonic NGA synthesis programs.  In the case of the EGM84 and EGM96,
the programs were compiled (with gfortran) and run under Linux.  In the
case of EGM2008, the prescription results in NaNs (possibly because of
uninitialized variables in the program?), so the data was generated with
the precompiled binary that NGA supplies for Windows.

<center>
Back to \ref other.  Forward to \ref geodesic.  Up to \ref contents.
</center>
**********************************************************************/
/**
\page geodesic Geodesics on the Ellipsoid

<center>
Back to \ref geoid.  Forward to \ref transversemercator.  Up to \ref contents.
</center>

GeographicLib::Geodesic and GeographicLib::GeodesicLine provide accurate
solutions to the direct and inverse geodesic problems.  The
<a href="Geod.1.html">Geod</a> utility provides an interface to these
classes.  GeographicLib::AzimuthalEquidistant implements the azimuthal
equidistant projection in terms of geodesics.
GeographicLib::CassiniSoldner implements a transverse cylindrical
equidistant projection in terms of geodesics.  The
<a href="GeodesicProj.1.html">GeodesicProj</a> utility provides an
interface to these projections.

References
 - F. W. Bessel,
   <a href="http://dx.doi.org/10.1002/asna.201011352">The calculation
   of longitude and latitude from geodesic measurements (1825)</a>,
   Astron. Nachr. 331(8), 852-861 (2010);
   translated by C. F. F. Karney and R. E. Deakin.  Preprint:
   <a href="http://arxiv.org/abs/0908.1824">arXiv:0908.1824</a>.
 - F. R. Helmert,
   <a href="http://geographiclib.sf.net/geodesic-papers/helmert80-en.pdf">
   Mathematical and Physical Theories of Higher Geodesy, Part 1 (1880)</a>,
   Aeronautical Chart and Information Center (St. Louis, 1964),
   Chaps. 5&ndash;7.
 - J. Danielsen,
   The Area under the Geodesic,
   Survey Review 30 (232), 61&ndash;66 (1989).
 - C. F. F. Karney,
   <a href="http://arxiv.org/abs/1102.1215v1">
   Geodesics on an ellipsoid of revolution</a>,
   Feb. 2011; preprint
   <a href="http://arxiv.org/abs/1102.1215v1">arxiv:1102.1215v1</a>;
   resource page
   <a href="http://geographiclib.sf.net/geod.html">geod.html</a>.
 - A collection of some papers on geodesics is available at
   http://geographiclib.sourceforge.net/geodesic-papers/biblio.html

\section testgeod Test data for geodesics

A test set a geodesics is available at
 - <a href="http://sf.net/projects/geographiclib/files/testdata/GeodTest.dat.gz/download">
   GeodTest.dat.gz</a>
 .
This is about 39 MB (compressed).  This consists of a set of geodesics
for the WGS84 ellipsoid.  A subset of this (consisting of 1/50 of the
members &mdash; about 690 kB, compressed) is available at
 - <a href="http://sf.net/projects/geographiclib/files/testdata/GeodTest-short.dat.gz/download">
   GeodTest-short.dat.gz</a>

Each line of the test set gives 10 space delimited numbers
 - latitude for point 1, \e lat1 (degrees, exact)
 - longitude for point 1, \e lon1 (degrees, always 0)
 - azimuth for point 1, \e azi1 (clockwise from north in degrees, exact)
 - latitude for point 2, \e lat2 (degrees, accurate to 10<sup>-18</sup> deg)
 - longitude for point 2, \e lon2 (degrees, accurate to 10<sup>-18</sup> deg)
 - azimuth for point 2, \e azi2 (degrees, accurate to 10<sup>-18</sup> deg)
 - geodesic distance from point 1 to point 2, \e s12 (meters, exact)
 - arc distance on the auxiliary sphere, \e a12 (degrees, accurate to
   10<sup>-18</sup> deg)
 - reduced length of the geodesic, \e m12 (meters, accurate to 0.1 pm)
 - the area under the geodesic, \e S12 (m<sup>2</sup>, accurate to
   1 mm<sup>2</sup>)
 .
These are computed using as direct geodesic calculations with the given
\e lat1, \e lon1, \e azi1, and \e s12.  The distance \e s12 always
corresponds to an arc length \e a12 <= 180<sup>o</sup>, so the given
geodesics give the shortest paths from point 1 to point 2.  For
simplicity and without loss of generality, \e lat1 is chosen in
[0<sup>o</sup>, 90<sup>o</sup>], \e lon1 is taken to be zero, \e azi1 is
chosen in [0<sup>o</sup>, 180<sup>o</sup>].  Furthermore, \e lat1 and \e
azi1 are taken to be multiples of 10<sup>-12</sup> deg and \e s12 is a
multiple of 0.1 um in [0 m, 20003931.4586254 m].  This results \e lon2
in [0<sup>o</sup>, 180<sup>o</sup>] and \e azi2 in [0<sup>o</sup>,
180<sup>o</sup>].

The direct calculation uses an expansion of the geodesic equations
accurate to \e f<sup>30</sup> (approximately 1 part in 10<sup>50</sup>)
and is computed with with
<a href="http://en.wikipedia.org/wiki/Maxima_(software)">Maxima</a>'s
bfloats and fpprec set to 100 (so the errors in the data are probably
1/2 of the values quoted above).

The contents of the file are as follows:
 - 100000 entries randomly distributed
 - 50000 entries which are nearly antipodal
 - 50000 entries with short distances
 - 50000 entries with one end near a pole
 - 50000 entries with both ends near opposite poles
 - 50000 entries which are nearly meridional
 - 50000 entries which are nearly equatorial
 - 50000 entries running between vertices (\e azi1 = \e azi2 = 90<sup>o</sup>)
 - 50000 entries ending close to vertices
 .
(a total of 500000 entries).  The values for \e s12 for the geodesics
running between vertices are truncated to a multiple of 0.1 pm and this
is used to determine point 2.

This data can be fed to the <a href="Geod.1.html">Geod</a> utility as
follows
 - Direct from point 1:
\verbatim
  gunzip -c GeodTest.dat.gz | cut -d' ' -f1,2,3,7 | ./Geod
\endverbatim
   This should yield columns 4, 5, 6, and 9 of the test set.
 - Direct from point 2:
\verbatim
  gunzip -c GeodTest.dat.gz | cut -d' ' -f4,5,6,7 |
  sed "s/ \([^ ]*$\)/ -\1/" | ./Geod
\endverbatim
   (The sed command negates the distance.)  This should yield columns 1,
   2, and 3, and the negative of column 9 of the test set.
 - Inverse between points 1 and 2:
\verbatim
  gunzip -c GeodTest.dat.gz | cut -d' ' -f1,2,4,5 | ./Geod -i
\endverbatim
   This should yield columns 3, 6, 7, and 9 of the test set.
 .
Add, e.g., "-p 6", to the call to Geod to change the precision of the
output.  Adding "-f" causes Geod to print 12 fields specifying the
geodesic; these include the 10 fields in the test set plus the geodesic
scales \e M12 and \e M21 which are inserted between \e m12 and \e S12.

\section geodseries Expansions for geodesics

We give here the series expansions for the various geodesic integrals
valid to order <i>f</i><sup>10</sup>.  In this release of the code, we
use a 6th-order expansions.  This is sufficient to maintain accuracy for
doubles for the SRMmax ellipsoid (\e a = 6400 km, \e f = 1/150).
However, the preprocessor macro GEOD_ORD can be used to select any order
up to 8.  (If using long doubles, with a 64-bit fraction, the default
order is 7.)  The series expanded to order <i>f</i><sup>30</sup> are
given in <a href="geodseries30.html"> geodseries30.html</a>.

In the formulas below ^ indicates exponentiation (\e f^3 = \e f*\e f*\e
f) and / indicates real division (3/5 = 0.6).  The equations need to be
converted to Horner form, but are here left in expanded form so that
they can be easily truncated to lower order.  These expansions were
obtained using the the Maxima code, <a href="geod.mac">geod.mac</a>.

In the expansions below, we have
 - \e alpha is the azimuth
 - \e alpha<sub>0</sub> is the azimuth at the equator crossing
 - \e lambda is the longitude measured from the equator crossing
 - \e omega is the spherical longitude
 - \e sigma is the spherical arc length
 - \e a is the equatorial radius
 - \e b is the polar semi-axis
 - \e f is the flattening
 - \e e<sup>2</sup> = \e f (2 - \e f)
 - \e e'<sup>2</sup> = \e e<sup>2</sup>/(1 - \e e<sup>2</sup>)
 - \e k<sup>2</sup> = \e e'<sup>2</sup> cos<sup>2</sup> \e alpha<sub>0</sub>
   = 4 \e eps / (1 - \e eps)<sup>2</sup>
 - \e n = \e f / (2 - \e f)
 - \e c<sup>2</sup> = \e a<sup>2</sup>/2 +
   \e b<sup>2</sup>/2 (tanh<sup>-1</sup> \e e)/\e e
 - \e ep2 = \e e'<sup>2</sup>
 - \e k2 = \e k<sup>2</sup>

The formula for distance is

&nbsp; &nbsp; \e s/\e b = \e I1(\e sigma)

where

&nbsp; &nbsp; \e I1(\e sigma) = \e A1 (\e sigma + \e B1(\e sigma))<br>
&nbsp; &nbsp; \e B1(\e sigma) =
sum<sub>\e j = 1</sub> \e C1<sub>j</sub> sin(2 \e j \e sigma)

and

\verbatim
A1 = (1 + 1/4 * eps^2
        + 1/64 * eps^4
        + 1/256 * eps^6
        + 25/16384 * eps^8
        + 49/65536 * eps^10) / (1 - eps);
\endverbatim

\verbatim
C1[1] = - 1/2 * eps
        + 3/16 * eps^3
        - 1/32 * eps^5
        + 19/2048 * eps^7
        - 3/4096 * eps^9;
C1[2] = - 1/16 * eps^2
        + 1/32 * eps^4
        - 9/2048 * eps^6
        + 7/4096 * eps^8
        + 1/65536 * eps^10;
C1[3] = - 1/48 * eps^3
        + 3/256 * eps^5
        - 3/2048 * eps^7
        + 17/24576 * eps^9;
C1[4] = - 5/512 * eps^4
        + 3/512 * eps^6
        - 11/16384 * eps^8
        + 3/8192 * eps^10;
C1[5] = - 7/1280 * eps^5
        + 7/2048 * eps^7
        - 3/8192 * eps^9;
C1[6] = - 7/2048 * eps^6
        + 9/4096 * eps^8
        - 117/524288 * eps^10;
C1[7] = - 33/14336 * eps^7
        + 99/65536 * eps^9;
C1[8] = - 429/262144 * eps^8
        + 143/131072 * eps^10;
C1[9] = - 715/589824 * eps^9;
C1[10] = - 2431/2621440 * eps^10;
\endverbatim

The function \e tau(\e sigma) = \e s/(\e b \e A1) = \e sigma + \e B1(\e
sigma) may be inverted by series reversion giving

&nbsp; &nbsp; \e sigma(\e tau) =
\e tau + sum<sub>\e j = 1</sub> \e C1'<sub>j</sub> sin(2 \e j \e tau)

where

\verbatim
C1'[1] = + 1/2 * eps
         - 9/32 * eps^3
         + 205/1536 * eps^5
         - 4879/73728 * eps^7
         + 9039/327680 * eps^9;
C1'[2] = + 5/16 * eps^2
         - 37/96 * eps^4
         + 1335/4096 * eps^6
         - 86171/368640 * eps^8
         + 4119073/28311552 * eps^10;
C1'[3] = + 29/96 * eps^3
         - 75/128 * eps^5
         + 2901/4096 * eps^7
         - 443327/655360 * eps^9;
C1'[4] = + 539/1536 * eps^4
         - 2391/2560 * eps^6
         + 1082857/737280 * eps^8
         - 2722891/1548288 * eps^10;
C1'[5] = + 3467/7680 * eps^5
         - 28223/18432 * eps^7
         + 1361343/458752 * eps^9;
C1'[6] = + 38081/61440 * eps^6
         - 733437/286720 * eps^8
         + 10820079/1835008 * eps^10;
C1'[7] = + 459485/516096 * eps^7
         - 709743/163840 * eps^9;
C1'[8] = + 109167851/82575360 * eps^8
         - 550835669/74317824 * eps^10;
C1'[9] = + 83141299/41287680 * eps^9;
C1'[10] = + 9303339907/2972712960 * eps^10;
\endverbatim

The reduced length is given by

&nbsp; &nbsp; \e m/\e b =
sqrt(1 + \e k<sup>2</sup> sin<sup>2</sup>\e sigma<sub>2</sub>)
cos \e sigma<sub>1</sub> sin \e sigma<sub>2</sub><br>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; -
sqrt(1 + \e k<sup>2</sup> sin<sup>2</sup>\e sigma<sub>1</sub>)
sin \e sigma<sub>1</sub> cos \e sigma<sub>2</sub><br>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; -
cos \e sigma<sub>1</sub>  cos \e sigma<sub>2</sub>
(\e J(\e sigma<sub>2</sub>) - \e J(\e sigma<sub>1</sub>))

where

&nbsp; &nbsp; \e J(\e sigma) =
\e I1(\e sigma) - \e I2(\e sigma)<br>
&nbsp; &nbsp; \e I2(\e sigma) = \e A2 (\e sigma + \e B2(\e sigma))<br>
&nbsp; &nbsp; \e B2(\e sigma) =
sum<sub>\e j = 1</sub> \e C2<sub>j</sub> sin(2 \e j \e sigma)

\verbatim
A2 = (1 + 1/4 * eps^2
        + 9/64 * eps^4
        + 25/256 * eps^6
        + 1225/16384 * eps^8
        + 3969/65536 * eps^10) * (1 - eps);
\endverbatim

\verbatim
C2[1] = + 1/2 * eps
        + 1/16 * eps^3
        + 1/32 * eps^5
        + 41/2048 * eps^7
        + 59/4096 * eps^9;
C2[2] = + 3/16 * eps^2
        + 1/32 * eps^4
        + 35/2048 * eps^6
        + 47/4096 * eps^8
        + 557/65536 * eps^10;
C2[3] = + 5/48 * eps^3
        + 5/256 * eps^5
        + 23/2048 * eps^7
        + 191/24576 * eps^9;
C2[4] = + 35/512 * eps^4
        + 7/512 * eps^6
        + 133/16384 * eps^8
        + 47/8192 * eps^10;
C2[5] = + 63/1280 * eps^5
        + 21/2048 * eps^7
        + 51/8192 * eps^9;
C2[6] = + 77/2048 * eps^6
        + 33/4096 * eps^8
        + 2607/524288 * eps^10;
C2[7] = + 429/14336 * eps^7
        + 429/65536 * eps^9;
C2[8] = + 6435/262144 * eps^8
        + 715/131072 * eps^10;
C2[9] = + 12155/589824 * eps^9;
C2[10] = + 46189/2621440 * eps^10;
\endverbatim

The longitude is given in terms of the spherical longitude by

&nbsp; &nbsp;
\e lambda = \e omega - \e f sin \e alpha<sub>0</sub> \e I3(\e sigma)

where

&nbsp; &nbsp; \e I3(\e sigma) = \e A3 (\e sigma + \e B3(\e sigma))<br>
&nbsp; &nbsp; \e B3(\e sigma) =
sum<sub>\e j = 1</sub> \e C3<sub>j</sub> sin(2 \e j \e sigma)

and

\verbatim
A3 = 1 - (1/2 - 1/2 * n) * eps
       - (1/4 + 1/8 * n - 3/8 * n^2) * eps^2
       - (1/16 + 3/16 * n + 1/16 * n^2 - 5/16 * n^3) * eps^3
       - (3/64 + 1/32 * n + 5/32 * n^2 + 5/128 * n^3 - 35/128 * n^4) * eps^4
       - (3/128 + 5/128 * n + 5/256 * n^2 + 35/256 * n^3 + 7/256 * n^4) * eps^5
       - (5/256 + 15/1024 * n + 35/1024 * n^2 + 7/512 * n^3) * eps^6
       - (25/2048 + 35/2048 * n + 21/2048 * n^2) * eps^7
       - (175/16384 + 35/4096 * n) * eps^8
       - 245/32768 * eps^9;
\endverbatim

\verbatim
C3[1] = + (1/4 - 1/4 * n) * eps
        + (1/8 - 1/8 * n^2) * eps^2
        + (3/64 + 3/64 * n - 1/64 * n^2 - 5/64 * n^3) * eps^3
        + (5/128 + 1/64 * n + 1/64 * n^2 - 1/64 * n^3 - 7/128 * n^4) * eps^4
        + (3/128 + 11/512 * n + 3/512 * n^2 + 1/256 * n^3 - 7/512 * n^4) * eps^5
        + (21/1024 + 5/512 * n + 13/1024 * n^2 + 1/512 * n^3) * eps^6
        + (243/16384 + 189/16384 * n + 83/16384 * n^2) * eps^7
        + (435/32768 + 109/16384 * n) * eps^8
        + 345/32768 * eps^9;
C3[2] = + (1/16 - 3/32 * n + 1/32 * n^2) * eps^2
        + (3/64 - 1/32 * n - 3/64 * n^2 + 1/32 * n^3) * eps^3
        + (3/128 + 1/128 * n - 9/256 * n^2 - 3/128 * n^3 + 7/256 * n^4) * eps^4
        + (5/256 + 1/256 * n - 1/128 * n^2 - 7/256 * n^3 - 3/256 * n^4) * eps^5
        + (27/2048 + 69/8192 * n - 39/8192 * n^2 - 47/4096 * n^3) * eps^6
        + (187/16384 + 39/8192 * n + 31/16384 * n^2) * eps^7
        + (287/32768 + 47/8192 * n) * eps^8
        + 255/32768 * eps^9;
C3[3] = + (5/192 - 3/64 * n + 5/192 * n^2 - 1/192 * n^3) * eps^3
        + (3/128 - 5/192 * n - 1/64 * n^2 + 5/192 * n^3 - 1/128 * n^4) * eps^4
        + (7/512 - 1/384 * n - 77/3072 * n^2 + 5/3072 * n^3 + 65/3072 * n^4) * eps^5
        + (3/256 - 1/1024 * n - 71/6144 * n^2 - 47/3072 * n^3) * eps^6
        + (139/16384 + 143/49152 * n - 383/49152 * n^2) * eps^7
        + (243/32768 + 95/49152 * n) * eps^8
        + 581/98304 * eps^9;
C3[4] = + (7/512 - 7/256 * n + 5/256 * n^2 - 7/1024 * n^3 + 1/1024 * n^4) * eps^4
        + (7/512 - 5/256 * n - 7/2048 * n^2 + 9/512 * n^3 - 21/2048 * n^4) * eps^5
        + (9/1024 - 43/8192 * n - 129/8192 * n^2 + 39/4096 * n^3) * eps^6
        + (127/16384 - 23/8192 * n - 165/16384 * n^2) * eps^7
        + (193/32768 + 3/8192 * n) * eps^8
        + 171/32768 * eps^9;
C3[5] = + (21/2560 - 9/512 * n + 15/1024 * n^2 - 7/1024 * n^3 + 9/5120 * n^4) * eps^5
        + (9/1024 - 15/1024 * n + 3/2048 * n^2 + 57/5120 * n^3) * eps^6
        + (99/16384 - 91/16384 * n - 781/81920 * n^2) * eps^7
        + (179/32768 - 55/16384 * n) * eps^8
        + 141/32768 * eps^9;
C3[6] = + (11/2048 - 99/8192 * n + 275/24576 * n^2 - 77/12288 * n^3) * eps^6
        + (99/16384 - 275/24576 * n + 55/16384 * n^2) * eps^7
        + (143/32768 - 253/49152 * n) * eps^8
        + 33/8192 * eps^9;
C3[7] = + (429/114688 - 143/16384 * n + 143/16384 * n^2) * eps^7
        + (143/32768 - 143/16384 * n) * eps^8
        + 429/131072 * eps^9;
C3[8] = + (715/262144 - 429/65536 * n) * eps^8
        + 429/131072 * eps^9;
C3[9] = + 2431/1179648 * eps^9;
\endverbatim

The formula for area between the geodesic and the equator is given in
Sec. 15 of
<a href="http://arxiv.org/abs/1102.1215v1">arxiv:1102.1215v1</a>
in terms of \e S,

&nbsp; &nbsp;
\e S = \e c<sup>2</sup> \e alpha + \e e<sup>2</sup> \e a<sup>2</sup>
cos \e alpha<sub>0</sub> sin \e alpha<sub>0</sub> \e I4(\e sigma)

where

&nbsp; &nbsp; \e I4(\e sigma) =
sum<sub>\e j = 0</sub> \e C4<sub>j</sub> cos((2\e j + 1) \e sigma)

with

\verbatim
C4[0] = + (2/3 - 1/15 * ep2 + 4/105 * ep2^2 - 8/315 * ep2^3 + 64/3465 * ep2^4 - 128/9009 * ep2^5 + 512/45045 * ep2^6 - 1024/109395 * ep2^7 + 16384/2078505 * ep2^8 - 32768/4849845 * ep2^9)
        - (1/20 - 1/35 * ep2 + 2/105 * ep2^2 - 16/1155 * ep2^3 + 32/3003 * ep2^4 - 128/15015 * ep2^5 + 256/36465 * ep2^6 - 4096/692835 * ep2^7 + 8192/1616615 * ep2^8) * k2
        + (1/42 - 1/63 * ep2 + 8/693 * ep2^2 - 80/9009 * ep2^3 + 64/9009 * ep2^4 - 128/21879 * ep2^5 + 2048/415701 * ep2^6 - 4096/969969 * ep2^7) * k2^2
        - (1/72 - 1/99 * ep2 + 10/1287 * ep2^2 - 8/1287 * ep2^3 + 112/21879 * ep2^4 - 1792/415701 * ep2^5 + 512/138567 * ep2^6) * k2^3
        + (1/110 - 1/143 * ep2 + 4/715 * ep2^2 - 56/12155 * ep2^3 + 896/230945 * ep2^4 - 768/230945 * ep2^5) * k2^4
        - (1/156 - 1/195 * ep2 + 14/3315 * ep2^2 - 224/62985 * ep2^3 + 64/20995 * ep2^4) * k2^5
        + (1/210 - 1/255 * ep2 + 16/4845 * ep2^2 - 32/11305 * ep2^3) * k2^6
        - (1/272 - 1/323 * ep2 + 6/2261 * ep2^2) * k2^7
        + (1/342 - 1/399 * ep2) * k2^8
        - 1/420 * k2^9;
C4[1] = + (1/180 - 1/315 * ep2 + 2/945 * ep2^2 - 16/10395 * ep2^3 + 32/27027 * ep2^4 - 128/135135 * ep2^5 + 256/328185 * ep2^6 - 4096/6235515 * ep2^7 + 8192/14549535 * ep2^8) * k2
        - (1/252 - 1/378 * ep2 + 4/2079 * ep2^2 - 40/27027 * ep2^3 + 32/27027 * ep2^4 - 64/65637 * ep2^5 + 1024/1247103 * ep2^6 - 2048/2909907 * ep2^7) * k2^2
        + (1/360 - 1/495 * ep2 + 2/1287 * ep2^2 - 8/6435 * ep2^3 + 112/109395 * ep2^4 - 1792/2078505 * ep2^5 + 512/692835 * ep2^6) * k2^3
        - (1/495 - 2/1287 * ep2 + 8/6435 * ep2^2 - 112/109395 * ep2^3 + 1792/2078505 * ep2^4 - 512/692835 * ep2^5) * k2^4
        + (5/3276 - 1/819 * ep2 + 2/1989 * ep2^2 - 32/37791 * ep2^3 + 64/88179 * ep2^4) * k2^5
        - (1/840 - 1/1020 * ep2 + 4/4845 * ep2^2 - 8/11305 * ep2^3) * k2^6
        + (7/7344 - 7/8721 * ep2 + 2/2907 * ep2^2) * k2^7
        - (2/2565 - 4/5985 * ep2) * k2^8
        + 1/1540 * k2^9;
C4[2] = + (1/2100 - 1/3150 * ep2 + 4/17325 * ep2^2 - 8/45045 * ep2^3 + 32/225225 * ep2^4 - 64/546975 * ep2^5 + 1024/10392525 * ep2^6 - 2048/24249225 * ep2^7) * k2^2
        - (1/1800 - 1/2475 * ep2 + 2/6435 * ep2^2 - 8/32175 * ep2^3 + 112/546975 * ep2^4 - 1792/10392525 * ep2^5 + 512/3464175 * ep2^6) * k2^3
        + (1/1925 - 2/5005 * ep2 + 8/25025 * ep2^2 - 16/60775 * ep2^3 + 256/1154725 * ep2^4 - 1536/8083075 * ep2^5) * k2^4
        - (1/2184 - 1/2730 * ep2 + 1/3315 * ep2^2 - 16/62985 * ep2^3 + 32/146965 * ep2^4) * k2^5
        + (1/2520 - 1/3060 * ep2 + 4/14535 * ep2^2 - 8/33915 * ep2^3) * k2^6
        - (7/20400 - 7/24225 * ep2 + 2/8075 * ep2^2) * k2^7
        + (14/47025 - 4/15675 * ep2) * k2^8
        - 1/3850 * k2^9;
C4[3] = + (1/17640 - 1/24255 * ep2 + 2/63063 * ep2^2 - 8/315315 * ep2^3 + 16/765765 * ep2^4 - 256/14549535 * ep2^5 + 512/33948915 * ep2^6) * k2^3
        - (1/10780 - 1/14014 * ep2 + 2/35035 * ep2^2 - 4/85085 * ep2^3 + 64/1616615 * ep2^4 - 384/11316305 * ep2^5) * k2^4
        + (5/45864 - 1/11466 * ep2 + 1/13923 * ep2^2 - 16/264537 * ep2^3 + 32/617253 * ep2^4) * k2^5
        - (1/8820 - 1/10710 * ep2 + 8/101745 * ep2^2 - 16/237405 * ep2^3) * k2^6
        + (1/8976 - 1/10659 * ep2 + 2/24871 * ep2^2) * k2^7
        - (1/9405 - 2/21945 * ep2) * k2^8
        + 1/10010 * k2^9;
C4[4] = + (1/124740 - 1/162162 * ep2 + 2/405405 * ep2^2 - 4/984555 * ep2^3 + 64/18706545 * ep2^4 - 128/43648605 * ep2^5) * k2^4
        - (1/58968 - 1/73710 * ep2 + 1/89505 * ep2^2 - 16/1700595 * ep2^3 + 32/3968055 * ep2^4) * k2^5
        + (1/41580 - 1/50490 * ep2 + 8/479655 * ep2^2 - 16/1119195 * ep2^3) * k2^6
        - (7/242352 - 7/287793 * ep2 + 2/95931 * ep2^2) * k2^7
        + (7/220077 - 2/73359 * ep2) * k2^8
        - 1/30030 * k2^9;
C4[5] = + (1/792792 - 1/990990 * ep2 + 1/1203345 * ep2^2 - 16/22863555 * ep2^3 + 32/53348295 * ep2^4) * k2^5
        - (1/304920 - 1/370260 * ep2 + 4/1758735 * ep2^2 - 8/4103715 * ep2^3) * k2^6
        + (7/1283568 - 7/1524237 * ep2 + 2/508079 * ep2^2) * k2^7
        - (2/268983 - 4/627627 * ep2) * k2^8
        + 1/110110 * k2^9;
C4[6] = + (1/4684680 - 1/5688540 * ep2 + 4/27020565 * ep2^2 - 8/63047985 * ep2^3) * k2^6
        - (1/1516944 - 1/1801371 * ep2 + 2/4203199 * ep2^2) * k2^7
        + (2/1589445 - 4/3708705 * ep2) * k2^8
        - 1/520520 * k2^9;
C4[7] = + (1/26254800 - 1/31177575 * ep2 + 2/72747675 * ep2^2) * k2^7
        - (1/7335900 - 1/8558550 * ep2) * k2^8
        + 1/3403400 * k2^9;
C4[8] = + (1/141338340 - 1/164894730 * ep2) * k2^8
        - 1/34714680 * k2^9;
C4[9] = + 1/737176440 * k2^9;
\endverbatim

<center>
Back to \ref geoid.  Forward to \ref transversemercator.  Up to \ref contents.
</center>
**********************************************************************/
/**
\page transversemercator Transverse Mercator Projection

<center>
Back to \ref geodesic.  Forward to \ref geocentric.  Up to \ref contents.
</center>

GeographicLib::TransverseMercator and
GeographicLib::TransverseMercatorExact provide accurate implementations
of the transverse Mercator projection.  The
 <a href="TransverseMercatorProj.1.html">TransverseMercatorProj</a>
utility provides an interface to these classes.

References
 - L. Kr&uuml;ger, <a
   href="http://dx.doi.org/10.2312/GFZ.b103-krueger28"> Konforme
   Abbildung des Erdellipsoids in der Ebene</a> (Conformal mapping of
   the ellipsoidal earth to the plane), Royal Prussian Geodetic Institute,
   New Series 52, 172 pp. (1912).
 - L. P. Lee,
   Conformal Projections Based on Elliptic Functions,
   (B. V. Gutsell, Toronto, 1976), 128pp.,
   ISBN: 0919870163
   (Also appeared as:
   Monograph 16, Suppl. No. 1 to Canadian Cartographer, Vol 13).
   Part V, pp. 67&ndash;101,
   <a href="http://dx.doi.org/10.3138/X687-1574-4325-WM62">Conformal
   Projections Based On Jacobian Elliptic Functions</a>.
 - C. F. F. Karney,
   <a href="http://dx.doi.org/10.1007/s00190-011-0445-3">
   Transverse Mercator with an accuracy of a few nanometers,</a>
   J. Geodesy 85(8), 475&ndash;485 (Aug. 2011);
   preprint
   <a href="http://arxiv.org/abs/1002.1417">arXiv:1002.1417</a>;
   resource page
   <a href="http://geographiclib.sf.net/tm.html">tm.html</a>.
 .
The algorithm for GeographicLib::TransverseMercator is based on
Kr&uuml;ger (1912); that for GeographicLib::TransverseMercatorExact is
based on Lee (1976).

\section testmerc Test data for the transverse Mercator projection

A test set for the transverse Mercator projection is available at
 - <a href="http://sf.net/projects/geographiclib/files/testdata/TMcoords.dat.gz/download">
   TMcoords.dat.gz</a>
 .
This is about 17 MB (compressed).  This test set consists of a set of
geographic coordinates together with the corresponding transverse
Mercator coordinates.  The WGS84 ellipsoid is used, with central
meridian 0<sup>o</sup>, central scale factor 0.9996 (the UTM value),
false easting = false northing = 0 m.

Each line of the test set gives 6 space delimited numbers
 - latitude (degrees, exact)
 - longitude (degrees, exact &mdash; see below)
 - easting (meters, accurate to 0.1 pm)
 - northing (meters, accurate to 0.1 pm)
 - meridian convergence (degrees, accurate to 10<sup>-18</sup> deg)
 - scale (accurate to 10<sup>-20</sup>)
 .
The latitude and longitude are all multiples of 10<sup>-12</sup> deg and
should be regarded as exact, except that longitude =
82.63627282416406551 should be interpreted as exactly 90 (1 - \e e)
degrees.  These results are computed using Lee's formulas with
<a href="http://en.wikipedia.org/wiki/Maxima_(software)">Maxima</a>'s
bfloats and fpprec set to 80 (so the errors in the data are probably 1/2
of the values quoted above).  The Maxima code,
<a href="tm.mac">tm.mac</a> and <a href="ellint.mac">ellint.mac</a>,
used to prepare this data set is included in the distribution.  You will
need to have Maxima installed to use this code.  The comments at the top
of <a href="tm.mac">tm.mac</a> illustrate how to run it.

The contents of the file are as follows:
 - 250000 entries randomly distributed in lat in [0, 90], lon in [0, 90];
 - 1000 entries randomly distributed on lat in [0, 90], lon = 0;
 - 1000 entries randomly distributed on lat = 0, lon in [0, 90];
 - 1000 entries randomly distributed on lat in [0, 90], lon = 90;
 - 1000 entries close to lat = 90 with lon in [0, 90];
 - 1000 entries close to lat = 0, lon = 0 with lat >= 0, lon >= 0;
 - 1000 entries close to lat = 0, lon = 90 with lat >= 0, lon <= 90;
 - 2000 entries close to lat = 0, lon = 90 (1 - \e e) with lat >= 0;
 - 25000 entries randomly distributed in lat
   in [-89, 0], lon in [90 (1 - \e e), 90];
 - 1000 entries randomly distributed on lat in [-89, 0], lon = 90;
 - 1000 entries randomly distributed on lat in [-89, 0], lon = 90 (1 - \e e);
 - 1000 entries close to lat = 0, lon = 90 (lat < 0, lon <= 90);
 - 1000 entries close to lat = 0, lon = 90 (1 - \e e)
   (lat < 0, lon <= 90 (1 - \e e));
 .
(a total of 287000 entries).  The entries for lat < 0<sup>o</sup> and
lon in [90<sup>o</sup> (1 - \e e), 90<sup>o</sup>] use the "extended"
domain for the transverse Mercator projection explained in Sec. 5 of
<a href="http://arxiv.org/abs/1002.1417">arXiv:1002.1417</a>.  The first
258000 entries have lat >= 0<sup>o</sup> and are suitable for testing
implementations following the standard convention.

\section tmseries Series approximation for transverse Mercator

Kr&uuml;ger (1912) gives a 4th-order approximation to the transverse
Mercator projection.  This is accurate to about 200 nm within the UTM
domain.  Here we present the series extended to 10th order.  By default,
GeographicLib::TransverseMercator uses the 6th-order approximation. The
preprocessor variable TM_TX_MAXPOW can be used to select an order from 4
thru 8.  The series expanded to order <i>n</i><sup>30</sup> are given in
<a href="tmseries30.html"> tmseries30.html</a>.

In the formulas below ^ indicates exponentiation (\e n^3 = \e n*\e n*\e
n) and / indicates real division (3/5 = 0.6).  The equations need to be
converted to Horner form, but are here left in expanded form so that
they can be easily truncated to lower order in \e n.  Some of the
integers here are not representable as 32-bit integers and will need to
be included as double literals.

\e A in Kr&uuml;ger, p. 12, eq. (5)
\verbatim
  A = a/(n + 1) * (1 + 1/4 * n^2
                     + 1/64 * n^4
                     + 1/256 * n^6
                     + 25/16384 * n^8
                     + 49/65536 * n^10);
\endverbatim

\e gamma in Kr&uuml;ger, p. 21, eq. (41)
\verbatim
alpha[1] =   1/2 * n
           - 2/3 * n^2
           + 5/16 * n^3
           + 41/180 * n^4
           - 127/288 * n^5
           + 7891/37800 * n^6
           + 72161/387072 * n^7
           - 18975107/50803200 * n^8
           + 60193001/290304000 * n^9
           + 134592031/1026432000 * n^10;
alpha[2] =   13/48 * n^2
           - 3/5 * n^3
           + 557/1440 * n^4
           + 281/630 * n^5
           - 1983433/1935360 * n^6
           + 13769/28800 * n^7
           + 148003883/174182400 * n^8
           - 705286231/465696000 * n^9
           + 1703267974087/3218890752000 * n^10;
alpha[3] =   61/240 * n^3
           - 103/140 * n^4
           + 15061/26880 * n^5
           + 167603/181440 * n^6
           - 67102379/29030400 * n^7
           + 79682431/79833600 * n^8
           + 6304945039/2128896000 * n^9
           - 6601904925257/1307674368000 * n^10;
alpha[4] =   49561/161280 * n^4
           - 179/168 * n^5
           + 6601661/7257600 * n^6
           + 97445/49896 * n^7
           - 40176129013/7664025600 * n^8
           + 138471097/66528000 * n^9
           + 48087451385201/5230697472000 * n^10;
alpha[5] =   34729/80640 * n^5
           - 3418889/1995840 * n^6
           + 14644087/9123840 * n^7
           + 2605413599/622702080 * n^8
           - 31015475399/2583060480 * n^9
           + 5820486440369/1307674368000 * n^10;
alpha[6] =   212378941/319334400 * n^6
           - 30705481/10378368 * n^7
           + 175214326799/58118860800 * n^8
           + 870492877/96096000 * n^9
           - 1328004581729009/47823519744000 * n^10;
alpha[7] =   1522256789/1383782400 * n^7
           - 16759934899/3113510400 * n^8
           + 1315149374443/221405184000 * n^9
           + 71809987837451/3629463552000 * n^10;
alpha[8] =   1424729850961/743921418240 * n^8
           - 256783708069/25204608000 * n^9
           + 2468749292989891/203249958912000 * n^10;
alpha[9] =   21091646195357/6080126976000 * n^9
           - 67196182138355857/3379030566912000 * n^10;
alpha[10]=   77911515623232821/12014330904576000 * n^10;
\endverbatim

\e beta in Kr&uuml;ger, p. 18, eq. (26*)
\verbatim
 beta[1] =   1/2 * n
           - 2/3 * n^2
           + 37/96 * n^3
           - 1/360 * n^4
           - 81/512 * n^5
           + 96199/604800 * n^6
           - 5406467/38707200 * n^7
           + 7944359/67737600 * n^8
           - 7378753979/97542144000 * n^9
           + 25123531261/804722688000 * n^10;
 beta[2] =   1/48 * n^2
           + 1/15 * n^3
           - 437/1440 * n^4
           + 46/105 * n^5
           - 1118711/3870720 * n^6
           + 51841/1209600 * n^7
           + 24749483/348364800 * n^8
           - 115295683/1397088000 * n^9
           + 5487737251099/51502252032000 * n^10;
 beta[3] =   17/480 * n^3
           - 37/840 * n^4
           - 209/4480 * n^5
           + 5569/90720 * n^6
           + 9261899/58060800 * n^7
           - 6457463/17740800 * n^8
           + 2473691167/9289728000 * n^9
           - 852549456029/20922789888000 * n^10;
 beta[4] =   4397/161280 * n^4
           - 11/504 * n^5
           - 830251/7257600 * n^6
           + 466511/2494800 * n^7
           + 324154477/7664025600 * n^8
           - 937932223/3891888000 * n^9
           - 89112264211/5230697472000 * n^10;
 beta[5] =   4583/161280 * n^5
           - 108847/3991680 * n^6
           - 8005831/63866880 * n^7
           + 22894433/124540416 * n^8
           + 112731569449/557941063680 * n^9
           - 5391039814733/10461394944000 * n^10;
 beta[6] =   20648693/638668800 * n^6
           - 16363163/518918400 * n^7
           - 2204645983/12915302400 * n^8
           + 4543317553/18162144000 * n^9
           + 54894890298749/167382319104000 * n^10;
 beta[7] =   219941297/5535129600 * n^7
           - 497323811/12454041600 * n^8
           - 79431132943/332107776000 * n^9
           + 4346429528407/12703122432000 * n^10;
 beta[8] =   191773887257/3719607091200 * n^8
           - 17822319343/336825216000 * n^9
           - 497155444501631/1422749712384000 * n^10;
 beta[9] =   11025641854267/158083301376000 * n^9
           - 492293158444691/6758061133824000 * n^10;
 beta[10]=   7028504530429621/72085985427456000 * n^10;
\endverbatim

The high-order expansions for \e alpha and \e beta were produced by the
Maxima program <a href="tmseries.mac">tmseries.mac</a> (included in the
distribution).  To run, start Maxima and enter
\verbatim
  load("tmseries.mac")$
\endverbatim
Further instructions are included at the top of the file.

<center>
Back to \ref geodesic.  Forward to \ref geocentric.  Up to \ref contents.
</center>
**********************************************************************/
/**
\page geocentric Geocentric coordinates

<center>
Back to \ref transversemercator.  Forward to \ref old.  Up to \ref contents.
</center>

The implementation of GeographicLib::Geocentric::Reverse is adapted from
 - H. Vermeille,
   <a href="http://dx.doi.org/10.1007/s00190-002-0273-6">
   Direct transformation from geocentric coordinates to geodetic
   coordinates</a>, J. Geodesy 76, 451&ndash;454 (2002).

This provides a closed-form solution but can't directly be applied close to
the center of the earth.  Several changes have been made to remove this
restriction and to improve the numerical accuracy.  Now the method is
accurate for all inputs (even if \e h is infinite).  The changes are
described in Appendix B of
 - C. F. F. Karney,
   <a href="http://arxiv.org/abs/1102.1215v1">Geodesics
   on an ellipsoid of revolution</a>,
   Feb. 2011; preprint
   <a href="http://arxiv.org/abs/1102.1215v1">arxiv:1102.1215v1</a>.

The problems encountered near the center of the ellipsoid are:
 - There's a potential division by zero in the definition of \e s. The
   equations are easily reformulated to avoid this problem.
 - \e t<sup>3</sup> may be negative.  This is OK; we just take the real root.
 - The solution for \e t may be complex.  However this leads to 3 real roots
   for \e u/\e r.  It's then just a matter of picking the one that computes
   the geodetic result which minimizes |\e h| and which avoids large
   round-off errors.
 - Some of the equations result in a large loss of accuracy due to
   subtracting nearly equal quantities.  E.g., \e k= sqrt(\e u + \e v + \e
   w<sup>2</sup>) - \e w is inaccurate if \e u + \e v is small; we can fix
   this by writing \e k = (\e u + \e v)/(sqrt(\e u + \e v + \e w<sup>2</sup>)
   + \e w).

The error is computed as follows.  Write a version of
Geocentric::WGS84.Forward which uses long doubles (including using long
doubles for the WGS84 parameters).  Generate random (long double) geodetic
coordinates (\e lat0, \e lon0, \e h0) and use the "long double"
WGS84.Forward to obtain the corresponding (long double) geocentric
coordinates (\e x0, \e y0, \e z0).  [We restrict \e h0 so that \e h0 >= - \e
a (1 - \e e<sup>2</sup>) / sqrt(1 - \e e<sup>2</sup> sin<sup>2</sup>\e
lat0), which ensures that (\e lat0, \e lon0, \e h0) is the principal
geodetic inverse of (\e x0, \e y0, \e z0).]  Because the forward calculation
is numerically stable and because long doubles (on Linux systems using g++)
provide 11 bits additional accuracy (about 3.3 decimal digits), we regard
this set of test data as exact.

Apply the double version of WGS84.Reverse to (\e x0, \e y0, \e z0) to
compute the approximate geodetic coordinates (\e lat1, \e lon1, \e h1).
Convert (\e lat1 - \e lat0, \e lon1 - \e lon0) to a distance, \e ds, on the
surface of the ellipsoid and define \e err = hypot(\e ds, \e h1 - \e h0).
For |\e h0| < 5000 km, we have \e err < 7 nm.

This methodology is not very useful very far from the globe, because the
absolute errors in the approximate geodetic height become large, or within
50 km of the center of the earth, because of errors in computing the
approximate geodetic latitude.  To illustrate the second issue, the maximum
value of \e err for \e h0 < 0 is about 80 mm.  The error is maximum close to
the circle given by geocentric coordinates satisfying hypot(\e x, \e y) = \e
a \e e<sup>2</sup> (= 42.7 km), \e z = 0.  (This is the center of meridional
curvature for \e lat = 0.)  The geodetic latitude for these points is \e lat
= 0.  However, if we move 1 nm towards the center of the earth, the geodetic
latitude becomes 0.04", a distance of 1.4 m from the equator.  If, instead,
we move 1 nm up, the geodetic latitude becomes 7.45", a distance of 229 m
from the equator.  In light of this, Reverse does quite well in this
vicinity.

To obtain a practical measure of the error for the general case we define
- <i>err</i><sub>h</sub> = |\e h1 - \e h0| / max(1, \e h0 / \e a)
- for \e h0 > 0, <i>err</i><sub>out</sub> = \e ds
- for \e h0 < 0, apply the long double version of WGS84.Forward to (\e lat1,
  \e lon1, \e h1) to give (\e x1, \e y1, \e z1) and compute
  <i>err</i><sub>in</sub> = hypot(\e x1 - \e x0, \e y1 - \e y0, \e z1 - \e
  z0).
.
We then find <i>err</i><sub>h</sub> < 8 nm, <i>err</i><sub>out</sub> < 4 nm,
and <i>err</i><sub>in</sub> < 7 nm.

The testing has been confined to the WGS84 ellipsoid.  The method will work
for all ellipsoids used in terrestrial geodesy.  However, the central region,
which leads to multiple real roots for the cubic equation in Reverse, pokes
outside the ellipsoid (at the poles) for ellipsoids with \e e > 1/sqrt(2).
Reverse has not been analyzed for this case.  Similarly ellipsoids which are
very nearly spherical near yield inaccurate results due to underflow; in the
other hand, the case of the sphere, \e f = 0, is treated specially and gives
accurate results.

Other comparable methods are K. M. Borkowski,
<a href="http://dx.doi.org/10.1007/BF00643807"> Transformation
of geocentric to geodetic coordinates without approximations</a>,
Astrophys. Space Sci. 139, 1&ndash;4 (1987)
(<a href="http://dx.doi.org/10.1007/BF00656995"> erratum</a>)
and T. Fukushima,
<a href="http://dx.doi.org/10.1007/s001900050271"> Fast transform from
geocentric to geodetic coordinates</a>, J. Geodesy 73, 603&ndash;610 (2003).
However the choice of independent variables in these methods leads
to a loss of accuracy for points near the equatorial plane.

<center>
Back to \ref transversemercator.  Forward to \ref old.  Up to \ref contents.

</center>
**********************************************************************/
/**
\page old Old Versions

<center>
Back to \ref geocentric.  Up to \ref contents.
</center>

List of versions in reverse chronological order together with a brief
list of changes.  (Note: Old versions of the library use a year-month
style of numbering.  Now, the library uses a major and minor version
number.)

 - <a href="http://sf.net/projects/geographiclib/files/distrib/GeographicLib-1.12.tar.gz/download">1.13 (released 2011-mm-dd)</a>
  - Changes to I/O:
    - allow : to be used as a DMS separator in
      GeographicLib::DMS::Decode(const std::string&, flag&);
    - also accept Unicode symbols for degrees, minutes seconds (coded as
      UTF-8);
    - provide \e swaplatlong optional argument to various
      GeographicLib::DMS and GeographicLib::GeoCoords functions to make
      longitude precede latitude;
    - also <a href="GeoConvert.1.html">GeoConvert</a> has a -w option to
      make longitude precede latitude on input and output;
    - implement functionality of GeographicLib::DMS in Javascript.
  - Slight improvement in starting guess for solution of geographic
    latitude in terms of conformal latitude in TransverseMercator,
    TransverseMercatorExact, and LambertConformalConic.
  - Allow default copy assigment to work for most classes.
  - Withdraw some deprecated routines.

 - <a href="http://sf.net/projects/geographiclib/files/distrib/GeographicLib-1.12.tar.gz/download">1.12 (released 2011-07-21)</a>
  - Change license to MIT/X11.
  - Add GeographicLib::PolygonArea class and equivalent Matlab function.
  - Provide Javascript and Python implementations of geodesic routines.
  - Fix Windows installer to include runtime dlls for Matlab.
  - Fix (innocuous) unassigned variable in Geodesic::GenInverse.
  - Geodesic routines in Matlab return a12 as first column of aux return
    value (incompatible change).
  - A couple of code changes to enable compilation with Visual Studio
    2003.

 - <a href="http://sf.net/projects/geographiclib/files/distrib/GeographicLib-1.11.tar.gz/download">1.11 (released 2011-06-27)</a>
  - Changes to <a href="Planimeter.1.html">Planimeter</a>:
    - add -l flag to <a href="Planimeter.1.html">Planimeter</a> for polyline
      calculations;
    - trim precision of area to 3 decimal places;
    - FIX BUG with pole crossing edges (due to compiler optimization).
  - <a href="Geod.1.html">Geod</a> no longer reports the reduced length
    by default; however the -f flag still reports this and in addition
    gives the geodesic scales and the geodesic area.
  - FIX BUGS (compiler-specific) in inverse geodesic calculations.
  - FIX BUG: accommodate tellg() returning -1 at end of string.
  - Change way flattening of the ellipsoid is specified:
    - constructors take \e f argument which is taken to be the
      flattening if \e f &lt; 1 and the inverse flattening otherwise
      (this is a compatible change for spheres and oblate ellipsoids, but it
      is an INCOMPATIBLE change for prolate ellipsoids);
    - the -e arguments to the \ref utilities are handled similarly; in
      addition, simple fractions, e.g., 1/297, can be used for the
      flattening;
    - introduce GeographicLib::Constants::WGS84_f() for the WGS84
      flattening (and deprecate Constants::WGS84_r() for the inverse
      flattening);
    - most classes have a Flattening() member function;
    - InverseFlattening() has been deprecated (and now returns inf for a
      sphere, instead of 0).

 - <a href="http://sf.net/projects/geographiclib/files/distrib/GeographicLib-1.10.tar.gz/download">1.10 (released 2011-06-11)</a>
  - Improvements to Matlab/Octave interface:
     - add {geocentric,localcartesian}{forward,reverse};
     - make geographiclibinterface more general;
     - install the source for the interface;
     - cmake compiles the interface if ENABLE_MATLAB=ON;
     - include compiled interface with Windows binary installer.
  - Fix various configuration issues
     - autoconf did not install Config.h;
     - cmake installed in man/man1 instead of share/man/man1;
     - cmake did not set the rpath on the tools.

 - <a href="http://sf.net/projects/geographiclib/files/distrib/GeographicLib-1.9.tar.gz/download">1.9 (released 2011-05-28)</a>
  - FIX BUG in area returned by
    <a href="Planimeter.1.html">Planimeter</a> for pole encircling polygons.
  - FIX BUG in error message reported when DMS::Decode reads the string
    "5d.".
  - FIX BUG in AlbersEqualArea::Reverse (lon0 not being used).
  - Ensure that all exceptions thrown in the \ref utilities are caught.
  - Avoid using catch within GeographicLib::DMS.
  - Move GeographicLib::Accumulator class from Planimeter.cpp to
    Constants.hpp.
  - Add GeographicLib::Math::sq<T>.
  - Simplify \ref geoidinst
    - add geographiclib-get-geoids for Unix-like systems;
    - add installers for Windows.
  - Provide cmake support:
    - build binary installer for Windows;
    - include regression tests;
    - add --input-string, --input-file, --output-file options to the
      \ref utilities to support tests.
  - Rename utility EquidistantTest as <a href="GeodesicProj.1.html">
    GeodesicProj</a> and TransverseMercatorTest as
    <a href="TransverseMercatorProj.1.html"> TransverseMercatorProj</a>.
  - Add <a href="ConicProj.1.html"> ConicProj</a>.
  - Reverse the initial sense of the -s option for
    <a href="Planimeter.1.html"> Planimeter</a>.
  - Migrate source from subversion to
    <a href="http://geographiclib.git.sourceforge.net/git/gitweb-index.cgi">
    git</a>.

 - <a href="http://sf.net/projects/geographiclib/files/distrib/geographiclib-1.8.tar.gz/download">1.8 (released 2011-02-22)</a>
  - Optionally return rotation matrix from GeographicLib::Geocentric and
    GeographicLib::LocalCartesian.
  - For the \ref utilities, supply man pages, -h prints the synopsis,
    --help prints the man page, --version prints the version.
  - Use accurate summation in <a href="Planimeter.1.html">Planimeter</a>.
  - Add 64-bit targets for Visual Studio 2010.
  - Use templates for defining math functions and some constants.
  - GeographicLib::Geoid updates
    - Add GeographicLib::Geoid::DefaultGeoidPath and
      GeographicLib::Geoid::DefaultGeoidName;
    - <a href="GeoidEval.1.html">GeoidEval</a> uses environment variable
      GEOID_NAME as the default geoid;
    - Add --msltohae and --haetomsl as
      <a href="GeoidEval.1.html">GeoidEval</a> options (and don't
      document the single hyphen versions).
  - Remove documentation that duplicates papers on transverse Mercator
    and geodesics.

 - <a href="http://sf.net/projects/geographiclib/files/distrib/geographiclib-1.7.tar.gz/download">1.7 (released 2010-12-21)</a>
  - FIX BUG in scale returned by GeographicLib::LambertConformalConic::Reverse.
  - Add GeographicLib::AlbersEqualArea projection.
  - Library created by Visual Studio is Geographic.lib instead of
    GeographicLib.lib (compatible with makefiles).
  - Make classes NaN aware.
  - Use cell arrays for MGRS strings in Matlab.
  - Add solution/project files for Visual Studio 2010 (32-bit only).
  - Use C++0x static_assert and math functions, if available.

 - <a href="http://sf.net/projects/geographiclib/files/distrib/geographiclib-1.6.tar.gz/download">1.6 (released 2010-11-23)</a>
  - FIX BUG introduced in GeographicLib::Geoid in version 1.5 (found by
    Dave Edwards).

 - <a href="http://sf.net/projects/geographiclib/files/distrib/geographiclib-1.5.tar.gz/download">1.5 (released 2010-11-19)</a>
  - Improve area calculations for small polygons.
  - Add -s and -r flags to <a href="Planimeter.1.html">Planimeter</a>.
  - Improve the accuracy of GeographicLib::LambertConformalConic using
    divided differences.
  - FIX BUG in meridian convergence returned by
    LambertConformalConic::Forward.
  - Add optional threadsafe parameter to GeographicLib::Geoid
    constructor.  WARNING: This changes may break binary compatibility
    with previous versions of %GeographicLib.  However, the library is
    source compatible.
  - Add GeographicLib::OSGB.
  - Matlab and Octave interfaces to GeographicLib::UTMUPS,
    GeographicLib::MGRS, GeographicLib::Geoid, GeographicLib::Geodesic
    provided.
  - Minor changes
    - explicitly turn on optimization in Visual Studio 2008 projects;
    - add missing dependencies in some Makefiles;
    - move pi() and degree() from GeographicLib::Constants to
      GeographicLib::Math;
    - introduce GeographicLib::Math::extended type to aid testing;
    - add GeographicLib::Math::epi() and GeographicLib::Math::edegree().
    - fixes to compile under cygwin;
    - tweak expression used to find latitude from conformal latitude.

 - <a href="http://sf.net/projects/geographiclib/files/distrib/geographiclib-1.4.tar.gz/download">1.4 (released 2010-09-12)</a>
  - Changes to GeographicLib::Geodesic and GeographicLib::GeodesicLine:
    - FIX BUG in Geodesic::Inverse with prolate ellipsoids;
    - add area computations to Geodesic::Direct and Geodesic::Inverse;
    - add geodesic areas to geodesic test set;
    - make GeodesicLine constructor public;
    - change longitude series in Geodesic into Helmert-like form;
    - ensure that equatorial geodesics have cos(alpha0) = 0 identically;
    - generalize interface for Geodesic and GeodesicLine;
    - split GeodesicLine and Geodesic into different files;
    - signal convergence failure in Geodesic::Inverse with NaNs;
    - deprecate one function in Geodesic and two functions in
      GeodesicLine;
    - deprecate -n option for <a href="Geod.1.html">Geod</a>.
    .
    WARNING: These changes may break binary compatibility with previous
    versions of %GeographicLib.  However, the library is source
    compatible (with the proviso that GeographicLib/GeodesicLine.hpp may
    now need to be included).
  - Add the <a href="Planimeter.1.html">Planimeter</a> utility for
    computing the areas of geodesic polygons.
  - Improve iterative solution of GeographicLib::Gnomonic::Reverse.
  - Add GeographicLib::Geoid::ConvertHeight.
  - Add -msltohae, -haetomsl, and -z options to
    <a href="GeoidEval.1.html">GeoidEval</a>.
  - Constructors check that minor radius is positive.
  - Add overloaded Forward and Reverse functions to the projection
    classes which don't return the convergence (or azimuth) and scale.
  - Document function parameters and return values consistently.

 - <a href="http://sf.net/projects/geographiclib/files/distrib/geographiclib-1.3.tar.gz/download">1.3 (released 2010-07-21)</a>
  - Add GeographicLib::Gnomonic, the ellipsoid generalization of the
    gnomonic projection.
  - Add -g and -e options to
    <a href="GeodesicProj.1.html">EquidistantTest</a>.
  - Use fixed-point notation for output from
    <a href="CartConvert.1.html">CartConvert</a>,
    <a href="GeodesicProj.1.html">EquidistantTest</a>,
    <a href="TransverseMercatorProj.1.html">TransverseMercatorTest</a>.
  - PolarStereographic:
    - Improved conversion to conformal coordinates;
    - Fix bug with scale at opposite pole;
    - Complain if latitude out of range in SetScale.
  - Add GeographicLib::Math::NaN().
  - Add long double version of hypot for Windows.
  - Add EllipticFunction::E(real).
  - Update references to Geotrans in MGRS documentation.
  - Speed up tmseries.mac.

 - <a href="http://sf.net/projects/geographiclib/files/distrib/geographiclib-1.2.tar.gz/download">1.2 (released 2010-05-21)</a>
  - FIX BUGS in GeographicLib::Geodesic,
    - wrong azimuth returned by Direct if point 2 is on a pole;
    - Inverse sometimes fails with very close points.
  - Improve calculation of scale in GeographicLib::CassiniSoldner,
    - add GeographicLib::GeodesicLine::Scale,
      GeographicLib::GeodesicLine::EquatorialAzimuth, and
      GeographicLib::GeodesicLine::EquatorialArc;
    - break friend connection between CassiniSoldner and Geodesic.
  - Add GeographicLib::DMS::DecodeAngle and
    GeographicLib::DMS::DecodeAzimuth.  Extend
    GeographicLib::DMS::Decode and GeographicLib::DMS::Encode to deal
    with distances.
  - Code and documentation changes in GeographicLib::Geodesic and
    GeographicLib::Geocentric for consistency with
    the forthcoming paper on geodesics.
  - Increase order of series using in GeographicLib::Geodesic to 6 (full
    accuracy maintained for ellipsoid flattening < 0.01).
  - Macro __NO_LONG_DOUBLE_MATH to disable use of long double.
  - Correct declaration of GeographicLib::Math::isfinite to return a bool.
  - Changes in the \ref utilities,
    - improve error reporting when parsing command line arguments;
    - accept latitudes and longitudes in decimal degrees or degrees,
      minutes, and seconds, with optional hemisphere designators;
    - <a href="GeoConvert.1.html">GeoConvert</a> -z accepts zone or
      zone+hemisphere;
    - <a href="GeoidEval.1.html">GeoidEval</a> accepts any of the input
      formats used by <a href="GeoConvert.1.html">GeoConvert</a>;
    - <a href="CartConvert.1.html">CartConvert</a> allows the ellipsoid
      to be specified with -e.

 - <a  href="http://sf.net/projects/geographiclib/files/distrib/geographiclib-1.1.tar.gz/download">1.1 (released 2010-02-09)</a>
  - FIX BUG (introduced in 2009-03) in EllipticFunction::E(sn,cn,dn).
  - Increase accuracy of scale calculation in TransverseMercator and
    TransverseMercatorExact.
  - Code and documentation changes for consistency with
    <a  href="http://arxiv.org/abs/1002.1417">arXiv:1002.1417</a>

 - <a  href="http://sf.net/projects/geographiclib/files/distrib/geographiclib-1.0.tar.gz/download">
   1.0 (released 2010-01-07)</a>
  - Add autoconf configuration files.
  - BUG FIX: Improve initial guess for Newton's method in
    PolarStereographic::Reverse.  (Previously this failed to converge
    when the co-latitude exceeded about 130 deg.)
  - Constructors for TransverseMercator, TransverseMercatorExact,
    PolarStereographic, Geocentric, and Geodesic now check for obvious
    problems with their arguments and throw an exception if necessary.
  - Most classes now include inspector functions such as MajorRadius()
    so that you can determine how instances were constructed.
  - Add GeographicLib::LambertConformalConic class.
  - Add GeographicLib::PolarStereographic::SetScale to allow the
    latitude of true scale to be specified.
  - Add solution and project files for Visual Studio 2008.
  - Add GeographicLib::GeographicErr for exceptions.
  - GeographicLib::Geoid changes:
    - BUG FIX: fix typo in GeographicLib::Geoid::Cache which could cause
      a segmentation fault in some cases when the cached area spanned
      the prime meridian.
    - Include sufficient edge data to allow heights to be returned for
      cached area without disk reads;
    - Add inspector functions to query the extent of the cache.

 - <a href="http://sf.net/projects/geographiclib/files/distrib/Geographic-2009-11.tgz/download">2009-11</a>
  - Allow specification of "closest UTM zone" in GeographicLib::UTMUPS
    and <a href="GeoConvert.1.html">GeoConvert</a> (via -t option).
  - Utilities now complain is there are too many tokens on input lines.
  - Include real-to-real versions of GeographicLib::DMS::Decode and
    GeographicLib::DMS::Encode.
  - More house-cleaning changes:
    - Ensure that functions which return results through reference
      arguments do not alter the arguments when an exception is thrown.
    - Improve accuracy of GeographicLib::MGRS::Forward.
    - Include more information in some error messages.
    - Improve accuracy of inverse hyperbolic functions.
    - Fix the way GeographicLib::Math functions handle different precisions.

 - <a href="http://sf.net/projects/geographiclib/files/distrib/Geographic-2009-10.tgz/download">2009-10</a>
  - Change web site to http://geographiclib.sourceforge.net
  - Several house-cleaning changes:
    - Change from the a flat directory structure to a more easily
      maintained one.
    - Introduce Math class for common mathematical functions (in
      Constants.hpp).
    - Use Math::real as the type for all real quantities.  By default this
      is typedefed to double; and the library should be installed this
      way.
    - Eliminate const reference members of AzimuthalEquidistant,
      CassiniSoldner and LocalCartesian so that they may be copied.
    - Make several constructors explicit.  Disallow some constructors.
      Disallow copy constructor/assignment for Geoid.
    - Document least squares formulas in Geoid.cpp.
    - Use unsigned long long for files positions of geoid files in Geoid.
    - Introduce optional mgrslimits argument in UTMUPS::Forward and
      UTMUPS::Reverse to enforce stricter MGRS limits on eastings and
      northings.
    - Add 64-bit targets in Visual Studio project files.

 - <a href="http://sf.net/projects/geographiclib/files/distrib/Geographic-2009-09.tgz/download">2009-09</a>
  - Add GeographicLib::Geoid and
    <a href="GeoidEval.1.html">GeoidEval</a> utility.

 - <a href="http://sf.net/projects/geographiclib/files/distrib/Geographic-2009-08.tgz/download">2009-08</a>
  - Add GeographicLib::CassiniSoldner class and
    <a href="GeodesicProj.1.html">EquidistantTest</a> utility.
  - Fix bug in GeographicLib::Geodesic::Inverse where NaNs were
    sometimes returned.
  - INCOMPATIBLE CHANGE: AzimuthalEquidistant now returns the reciprocal
    of the azimuthal scale instead of the reduced length.
  - Add -n option to <a href="GeoConvert.1.html">GeoConvert</a>.

 - <a href="http://sf.net/projects/geographiclib/files/distrib/Geographic-2009-07.tgz/download">2009-07</a>
  - Speed up the series inversion code in tmseries.mac and geod.mac.
  - Reference Borkowski in section on \ref geocentric.

 - <a href="http://sf.net/projects/geographiclib/files/distrib/Geographic-2009-06.tgz/download">2009-06</a>
  - Add routines to decode and encode zone+hemisphere to GeographicLib::UTMUPS.
  - Clean up code in GeographicLib::Geodesic.

 - <a href="http://sf.net/projects/geographiclib/files/distrib/Geographic-2009-05.tgz/download">2009-05</a>
  - Improvements to GeographicLib::Geodesic:
    - more economical series expansions,
    - return reduced length (as does the
      <a href="Geod.1.html">Geod</a> utility),
    - improved calculation of starting point for inverse method,
    - use reduced length to give derivative for Newton's method.
  - Add GeographicLib::AzimuthalEquidistant class.
  - Make GeographicLib::Geocentric, GeographicLib::TransverseMercator,
    and GeographicLib::PolarStereographic classes work with prolate
    ellipsoids.
  - <a href="CartConvert.1.html">CartConvert</a> checks its inputs more
    carefully.
  - Remove reference to defunct Constants.cpp from GeographicLib.vcproj.

 - <a href="http://sf.net/projects/geographiclib/files/distrib/Geographic-2009-04.tgz/download">2009-04</a>
  - Use compile-time constants to select the order of series in
    GeographicLib::TransverseMercator.
  - 2x unroll of Clenshaw summation to avoid data shuffling.
  - Simplification of GeographicLib::EllipticFunction::E.
  - Use STATIC_ASSERT for compile-time checking of constants.
  - Improvements to GeographicLib::Geodesic:
    - compile-time option to change order of series used,
    - post Maxima code for generating the series,
    - tune the order of series for double,
    - improvements in the selection of starting points for Newton's
      method,
    - accept and return spherical arc lengths,
    - works with both oblate and prolate ellipsoids,
    - add -a, -e, -b options to the <a href="Geod.1.html">Geod</a> utility.

 - <a href="http://sf.net/projects/geographiclib/files/distrib/Geographic-2009-03.tgz/download">2009-03</a>
  - Add GeographicLib::Geodesic and the <a href="Geod.1.html">Geod</a> utility.
  - Declare when no exceptions are thrown by functions.
  - Minor changes to GeographicLib::DMS class.
  - Use invf = 0 to mean a sphere in constructors to some classes.
  - The makefile creates a library and includes an install target.
  - Rename GeographicLib::ECEF to GeographicLib::Geocentric, ECEFConvert
    to <a href="CartConvert.1.html">CartConvert</a>.
  - Use inline functions to define constant doubles in Constants.hpp.

 - <a href="http://sf.net/projects/geographiclib/files/distrib/Geographic-2009-02.tgz/download">2009-02</a>
  - Fix documentation of constructors (flattening -> inverse
    flattening).
  - Use std versions of math functions.
  - Add GeographicLib::ECEF and GeographicLib::LocalCartesian classes
    and the ECEFConvert utility.
  - Gather the documentation on the utility programs onto one page.

 - <a href="http://sf.net/projects/geographiclib/files/distrib/Geographic-2009-01.tgz/download">2009-01</a>
  - First proper release of library.
  - More robust GeographicLib::TransverseMercatorExact:
    - Introduce \e extendp version of constructor,
    - Test against extended test data,
    - Optimize starting positions for Newton's method,
    - Fix behavior near all singularities,
    - Fix order dependence in C++ start-up code,
    - Improved method of computing scale and convergence.
  - Documentation on transverse Mercator projection.
  - Add GeographicLib::MGRS, GeographicLib::UTMUPS, etc.

 - 2008-09
  - Ad hoc posting of information on the transverse Mercator projection.

<center>
Back to \ref geocentric.  Up to \ref contents.
</center>
**********************************************************************/
