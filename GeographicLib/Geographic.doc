// -*- text -*-
/**
 * \file Geographic.doc
 * \brief Documentation for GeographicLib
 *
 * Written by Charles Karney <charles@karney.com> and licensed under the
 * LGPL.  For more information, see http://charles.karney.info/geographic/
 **********************************************************************/
// $Id$
/**
\mainpage Geographic library
\author <a href="http://charles.karney.info/">Charles Karney</a>
<charles@karney.com>
\version 2008-04
\date 2008-04-28

\section abstract Abstract

A small set of C++ classes to perform conversions between geographic,
UTM, UPS, and MGRS coordinates.

\section download Download

The code is available for download at
http://charles.karney.info/geographic/Geographic.tgz

It is licensed under the LGPL.  For more information, see
http://charles.karney.info/geographic/

\section contents Contents
 - \ref intro
 - \ref example
 - \ref organization
 - \ref seeds
 - \ref integer
 - \ref real
   - \ref fixed
   - \ref floating
   - \ref reals
 - \ref other
 - \ref otherdist
 - \ref save
 - \ref programming
   - \ref conversion
   - \ref stl
   - \ref misc
   - \ref switch
   - \ref timing
   - \ref checking
 - \ref parallel
   - \ref leapfrog
 - \ref function
 - \ref old


Define mu = asin(sin(lam) * cos(phi))
          = angular distance from meridian

Errors are primarily a function of mu (or x).

For each set, define

 - dxm  = max(erra, errb)
          for mth order method (order n^m or e^(2*m)), where
        - erra = the error in the forward transformation scaled to
                 distance on the ground with the scale factor k
        - errb = the discrepancy in applying the forward transformation
                 followed by the reverse transformation and converting
                 the result to a distance
 - dgam = max error in meridian convergence using the 6th order method
 - dk   = max relative error in scale using the 6th order method

Units:

   1um = 1e-6 m
   d = degrees, ' = minutes, " = seconds
   % = 0.01, %% = 0.001

<center>
<table>
<caption>Errors</caption>
<tr><th>     set      <th>   dx4<th>     dx5<th>     dx6<th> 
   dx7<th>     dx8<th>      dgam<th>        dk
<tr><td> x<4e5, y<95e5<td> 200nm<td>   5.0nm<td>   5.0nm<td> 
 5.0nm<td>   5.0nm<td>    6e-11"<td>   2e-12%%
<tr><td> x<5e5, y<96e5<td> 210nm<td>   5.0nm<td>   5.0nm<td> 
 5.0nm<td>   5.0nm<td>    6e-11"<td>   2e-12%%
<tr><td>     mu<10    <td> 350nm<td>   5.1nm<td>   5.0nm<td> 
 5.0nm<td>   5.0nm<td>    1e-10"<td>   2e-12%%
<tr><td>     mu<15    <td> 700nm<td>   6.5nm<td>   5.0nm<td> 
 5.0nm<td>   5.0nm<td>    1e-10"<td>   2e-12%%
<tr><td>     mu<20    <td> 1.5um<td>    11nm<td>   5.0nm<td> 
 5.0nm<td>   5.0nm<td>    1e-10"<td>   2e-12%%
<tr><td>     mu<25    <td> 3.3um<td>    23nm<td>   5.0nm<td> 
 5.0nm<td>   5.0nm<td>    2e-10"<td>   2e-12%%
<tr><td>     mu<30    <td> 7.6um<td>    62nm<td>   5.0nm<td> 
 5.0nm<td>   5.0nm<td>    4e-10"<td>   2e-12%%
<tr><td>     mu<35    <td>  18um<td>   180nm<td>   5.0nm<td> 
 5.0nm<td>   5.0nm<td>   1.0e-9"<td>   6e-12%%
<tr><td>     mu<40    <td>  47um<td>   570nm<td>    10nm<td> 
 5.0nm<td>   5.0nm<td>   4.1e-9"<td>   2e-11%%
<tr><td>     mu<45    <td> 130um<td>   2.0um<td>    35nm<td> 
 5.0nm<td>   5.0nm<td>   2.0e-8"<td>   1e-10%%
<tr><td>     mu<50    <td> 400um<td>   8.0um<td>   170nm<td> 
 6.3nm<td>   5.0nm<td>   1.1e-7"<td>   6e-10%%
<tr><td>     mu<55    <td> 1.4mm<td>    37um<td>   1.1um<td> 
  33nm<td>   5.0nm<td>   8.0e-7"<td>  3.8e-9%%
<tr><td>     mu<60    <td> 5.8mm<td>   210um<td>   8.4um<td> 
 350nm<td>    17nm<td>   7.1e-6"<td>  3.5e-8%%
<tr><td>     mu<65    <td>  31mm<td>   1.6mm<td>    94um<td> 
 5.7um<td>   360nm<td>   9.8e-5"<td>  4.7e-7%%
<tr><td>     mu<70    <td> 230mm<td>    20mm<td>   1.8mm<td> 
 170um<td>    17um<td>   2.2e-3"<td>  1.1e-5%%
<tr><td>     mu<72    <td> 600mm<td>    62mm<td>   6.9mm<td> 
 820um<td>   100um<td>    0.010"<td>  4.8e-5%%
<tr><td>     mu<74    <td> 1.8m <td>   230mm<td>    33mm<td> 
 4.9mm<td>   750um<td>    0.055"<td>  2.7e-4%%
<tr><td>     mu<76    <td> 6.2m <td>   1.1m <td>   200mm<td> 
  39mm<td>   7.9mm<td>     0.39"<td>  1.8e-3%%
<tr><td>     mu<78    <td>  27m <td>   6.3m <td>   1.6m <td> 
 430mm<td>   .12m <td>      3.7"<td>   0.017%%
<tr><td>     mu<80    <td> 160m <td>    55m <td>    20m <td> 
 7.9m <td>   3.2m <td>       55"<td>    0.28%%
<tr><td>     mu<82    <td> 1.5km<td>   870m <td>   520m <td> 
 330m <td>   210m <td>       35'<td>     7.9%%
<tr><td>     mu<84    <td>  27km<td>    28km<td>    37km<td> 
  53km<td>    81km<td>       19d<td>      39%
</table>
</center>


<center>
Forward to \ref intro.
</center>

**********************************************************************/
/**
\page intro Introduction


<center>
Forward to \ref example.  Up to \ref contents.
</center>

Text here

<center>
Forward to \ref example.  Up to \ref contents.
</center>
**********************************************************************/
/**
\page example Example

<center>
Back to \ref intro.  Forward to \ref organization.  Up to \ref contents.
</center>

\verbatim
I give here higher order terms for computing the Transverse Mercator
Projection and improved formulas for convergence and scale following the
methods given in

  JHS 154, ETRS89 - ja"rjestelma"a"n liittyva"t karttaprojektiot,
  tasokoordinaatistot ja karttalehtijako (Map projections, plane
  coordinates, and map sheet index for ETRS89), Published by JUHTA,
  Finnish Geodetic Institute, and the National Land Survey of Finland,
  34 p (2006).

  http://www.jhs-suositukset.fi/suomi/jhs154
  http://docs.jhs-suositukset.fi/jhs-suositukset/JHS154/JHS154.pdf

This method is the same as Krueger's 1912 paper

   L. Krueger, Konforme Abbildung des Erdellipsoids in der Ebene
   (Conformal mpping of the Earth ellipsoid to the plane),
   Royal Prussian Geodetic Institute, New Series 52, 172 p (1912)

   DOI: 10.2312/GFZ.b103-krueger28
   http://www.gfz-potsdam.de/bib/pub/digi/krueger2.pdf

and I've noted where the higher order terms appear in this paper.

Here ^ indicates exponentiation (n^3 = n*n*n) and / indicates real
division (3/5 = 0.6).  The equations need to be converted to Horner
form, but are here left in expanded form so that they can be easily
truncated to lower order in n.  Some of the integers here are not
representable as 32-bit integers and will need to be included as double
literals.

Twelfth order terms for the forward and backwards transformations:

eq (01) [A in Krueger, p 12, eq (5)]
  A1 = a/(n + 1) * (1 + 1/4 * n^2
       	      	      + 1/64 * n^4
		      + 1/256 * n^6
		      + 25/16384 * n^8
                      + 49/65536 * n^10
		      + 441/1048576 * n^12);

eqs (06) [beta in Krueger, p 18, eq (26*)]
  h[1]   =   1/2 * n
           - 2/3 * n^2
           + 37/96 * n^3
           - 1/360 * n^4
           - 81/512 * n^5
           + 96199/604800 * n^6
           - 5406467/38707200 * n^7
           + 7944359/67737600 * n^8
           - 7378753979/97542144000 * n^9
           + 25123531261/804722688000 * n^10
           - 9280258847/6437781504000 * n^11
           - 1628053924171/99584432640000 * n^12;
  h[2]   =   1/48 * n^2
           + 1/15 * n^3
           - 437/1440 * n^4
           + 46/105 * n^5
           - 1118711/3870720 * n^6
           + 51841/1209600 * n^7
           + 24749483/348364800 * n^8
           - 115295683/1397088000 * n^9
           + 5487737251099/51502252032000 * n^10
           - 5845886411021/41845579776000 * n^11
           + 6339155669701909/46867049349120000 * n^12;
  h[3]   =   17/480 * n^3
           - 37/840 * n^4
           - 209/4480 * n^5
           + 5569/90720 * n^6
           + 9261899/58060800 * n^7
           - 6457463/17740800 * n^8
           + 2473691167/9289728000 * n^9
           - 852549456029/20922789888000 * n^10
           - 2673218294321/191294078976000 * n^11
           - 1619588070701683/35150287011840000 * n^12;
  h[4]   =   4397/161280 * n^4
           - 11/504 * n^5
           - 830251/7257600 * n^6
           + 466511/2494800 * n^7
           + 324154477/7664025600 * n^8
           - 937932223/3891888000 * n^9
           - 89112264211/5230697472000 * n^10
           + 12003335387/32691859200 * n^11
           - 537877266968267441/2249618368757760000 * n^12;
  h[5]   =   4583/161280 * n^5
           - 108847/3991680 * n^6
           - 8005831/63866880 * n^7
           + 22894433/124540416 * n^8
           + 112731569449/557941063680 * n^9
           - 5391039814733/10461394944000 * n^10
           + 4863559943251/167382319104000 * n^11
           + 37588208648677/67596705792000 * n^12;
  h[6]   =   20648693/638668800 * n^6
           - 16363163/518918400 * n^7
           - 2204645983/12915302400 * n^8
           + 4543317553/18162144000 * n^9
           + 54894890298749/167382319104000 * n^10
           - 132058444054073/177843714048000 * n^11
           - 21678380925301381/85364982743040000 * n^12;
  h[7]   =   219941297/5535129600 * n^7
           - 497323811/12454041600 * n^8
           - 79431132943/332107776000 * n^9
           + 4346429528407/12703122432000 * n^10
           + 947319776978297/1625999671296000 * n^11
           - 139564766909992667/115852476579840000 * n^12;
  h[8]   =   191773887257/3719607091200 * n^8
           - 17822319343/336825216000 * n^9
           - 497155444501631/1422749712384000 * n^10
           + 4081516004323/8281937664000 * n^11
           + 3016420810780677019/2994340933140480000 * n^12;
  h[9]   =   11025641854267/158083301376000 * n^9
           - 492293158444691/6758061133824000 * n^10
           - 3340781295639871/6360528125952000 * n^11
           + 230755947172792843/315376186245120000 * n^12;
  h[10]  =   7028504530429621/72085985427456000 * n^10
           - 1396721719354981/13516122267648000 * n^11
           - 242069739433316973869/299733527407362048000 * n^12;
  h[11]  =   20180430688893997/144171970854912000 * n^11
           - 39227670225311092139/261131482210959360000 * n^12;
  h[12]  =   170866240186706518133/831839653739888640000 * n^12;

eqs (07) [gamma in Krueger, p 21, eq (41)]
  h'[1]  =   1/2 * n
           - 2/3 * n^2
           + 5/16 * n^3
           + 41/180 * n^4
           - 127/288 * n^5
           + 7891/37800 * n^6
           + 72161/387072 * n^7
           - 18975107/50803200 * n^8
           + 60193001/290304000 * n^9
           + 134592031/1026432000 * n^10
           - 1043934033787/3218890752000 * n^11
           + 1107802529272207/5178390497280000 * n^12;
  h'[2]  =   13/48 * n^2
           - 3/5 * n^3
           + 557/1440 * n^4
           + 281/630 * n^5
           - 1983433/1935360 * n^6
           + 13769/28800 * n^7
           + 148003883/174182400 * n^8
           - 705286231/465696000 * n^9
           + 1703267974087/3218890752000 * n^10
           + 490493610499/373621248000 * n^11
           - 1975809888712343/976396861440000 * n^12;
  h'[3]  =   61/240 * n^3
           - 103/140 * n^4
           + 15061/26880 * n^5
           + 167603/181440 * n^6
           - 67102379/29030400 * n^7
           + 79682431/79833600 * n^8
           + 6304945039/2128896000 * n^9
           - 6601904925257/1307674368000 * n^10
           + 35472608886503/41845579776000 * n^11
           + 7660808256523559/1098446469120000 * n^12;
  h'[4]  =   49561/161280 * n^4
           - 179/168 * n^5
           + 6601661/7257600 * n^6
           + 97445/49896 * n^7
           - 40176129013/7664025600 * n^8
           + 138471097/66528000 * n^9
           + 48087451385201/5230697472000 * n^10
           - 634613396309/40864824000 * n^11
           + 152161926556090753/1124809184378880000 * n^12;
  h'[5]  =   34729/80640 * n^5
           - 3418889/1995840 * n^6
           + 14644087/9123840 * n^7
           + 2605413599/622702080 * n^8
           - 31015475399/2583060480 * n^9
           + 5820486440369/1307674368000 * n^10
           + 98568244458947/3678732288000 * n^11
           - 1367520624030470251/29877743960064000 * n^12;
  h'[6]  =   212378941/319334400 * n^6
           - 30705481/10378368 * n^7
           + 175214326799/58118860800 * n^8
           + 870492877/96096000 * n^9
           - 1328004581729009/47823519744000 * n^10
           + 3512873113922087/355687428096000 * n^11
           + 986615629722639449/13133074268160000 * n^12;
  h'[7]  =   1522256789/1383782400 * n^7
           - 16759934899/3113510400 * n^8
           + 1315149374443/221405184000 * n^9
           + 71809987837451/3629463552000 * n^10
           - 52653013293696143/812999835648000 * n^11
           + 101784256296129577/4455864483840000 * n^12;
  h'[8]  =   1424729850961/743921418240 * n^8
           - 256783708069/25204608000 * n^9
           + 2468749292989891/203249958912000 * n^10
           + 117880637749661/2707556544000 * n^11
           - 5921832934345276446697/38926432130826240000 * n^12;
  h'[9]  =   21091646195357/6080126976000 * n^9
           - 67196182138355857/3379030566912000 * n^10
           + 395018924202597949/15446996877312000 * n^11
           + 91220875613845291081/946128558735360000 * n^12;
  h'[10] =   77911515623232821/12014330904576000 * n^10
           - 268897530802721453/6758061133824000 * n^11
           + 8257746726303249815683/149866763703681024000 * n^12;
  h'[11] =   12809767642647461/1029799791820800 * n^11
           - 5303630969873795374429/65282870552739840000 * n^12;
  h'[12] =   2240624428311897034834681/91918281738257694720000 * n^12;

eqs (15), (16), (17), (18), (23), (24), (25), (26) are extended in the
obvious way.

The formulas for meridian convergence (34) and scale (35) are only good
for small l.  More accurate expressions are given here where ep2 = e'^2
(eq. 04).

    double
      c = cos(phi),
      s = sin(l),
      c2 = c * c,
      s2 = s * s,
      d = 1 - s2 * c2,
      // Accurate to order ep2^2
      carg = 1 + c2 * c2 * s2 / d * ep2 *
      (1 + c2 / (3 * d * d) *
       (2 - s2 * (c2 * ((4 * c2 - 1) * s2 - 9) + 8)) * ep2),
      // Accurate to order ep2
      cabs = 1 + c2 * c2 * s2 * ((c2 - 2) * s2 + 1) / (2 * d * d) * ep2;
    // This replaces (34)
    gamma = atan2(sin(phi) * s * carg, cos(l));
    // This replaces (35)
    k = cabs/sqrt(d);

For more accuracy, directly differentiate the series involving h' or h.
The accumulation of the sum can be carried out at the same time as the
transformation itself (and the calculation slots into a Clenshaw
summation very easily).  The derivates give the convergence, gamma'',
and scale, k'', of the [xi, eta] system relative to [xi', eta'] and vice
versa.  For the full convergence and scale these need to be compounded
with the convergence, gamma', and scale, k', of the [xi', eta'] system
with

    gamma = gamma' + gamma''
        k = k' + k''

gamma' and k' are conveniently expressed as

    gamma' = atan(tan(lam) * sin(beta))
    	   = atan(tan(lam) * tanh(Q))
    	   = atan(tan(xi') * tanh(eta'))
        k' = sqrt(1 - e^2 * sin(phi)^2)
             * (cos(beta) / cos(phi)) * cosh(eta')

where the factors on the last line are can be computed accurately with

   (cos(beta) / cos(phi)) * cosh(eta')
           = cosh(Q') / hypot(sinh(Q), cos(lam))
	   = cosh(Q') * hypot(sinh(eta'), cos(xi'))

These last two expressions preserve accuracy near the pole.  See also
Krueger, pp 19-20, eqs (19) to (33*) and pp 21-22, eqs (43) to (47).

Finally here is a summary of the errors in this implementation of the
Transverse Mercator projection.  Errors are relative to an arbitrary
precision formulation (see tm.mac).

Define mu = asin(sin(l) * cos(phi))
          = angular distance from meridian

Errors are primarily a function of mu (or x).

For each set, define

   dxm  = max(erra, errb)
          for mth order method (order n^m or e^(2*m)), where

          erra = the error in the forward transformation scaled to
                 distance on the ground with the scale factor k

          errb = the discrepancy in applying the forward transformation
                 followed by the reverse transformation and converting
                 the result to a distance

   dgam = max error in meridian convergence using the 6th order series

   dk   = max relative error in scale using the 6th order series

Units:

   1um = 1e-6 m
   d = degrees, ' = minutes, " = seconds
   % = 0.01, %% = 0.001

    set         dx4     dx5     dx6     dx7     dx8      dgam        dk
x<4e5, y<95e5 200nm   5.0nm   5.0nm   5.0nm   5.0nm    6e-11"   2e-12%%
x<5e5, y<96e5 210nm   5.0nm   5.0nm   5.0nm   5.0nm    6e-11"   2e-12%%
    mu<10     350nm   5.1nm   5.0nm   5.0nm   5.0nm    1e-10"   2e-12%%
    mu<15     700nm   6.5nm   5.0nm   5.0nm   5.0nm    1e-10"   2e-12%%
    mu<20     1.5um    11nm   5.0nm   5.0nm   5.0nm    1e-10"   2e-12%%
    mu<25     3.3um    23nm   5.0nm   5.0nm   5.0nm    2e-10"   2e-12%%
    mu<30     7.6um    62nm   5.0nm   5.0nm   5.0nm    4e-10"   2e-12%%
    mu<35      18um   180nm   5.0nm   5.0nm   5.0nm   1.0e-9"   6e-12%%
    mu<40      47um   570nm    10nm   5.0nm   5.0nm   4.1e-9"   2e-11%%
    mu<45     130um   2.0um    35nm   5.0nm   5.0nm   2.0e-8"   1e-10%%
    mu<50     400um   8.0um   170nm   6.3nm   5.0nm   1.1e-7"   6e-10%%
    mu<55     1.4mm    37um   1.1um    33nm   5.0nm   8.0e-7"  3.8e-9%%
    mu<60     5.8mm   210um   8.4um   350nm    17nm   7.1e-6"  3.5e-8%%
    mu<65      31mm   1.6mm    94um   5.7um   360nm   9.8e-5"  4.7e-7%%
    mu<70     230mm    20mm   1.8mm   170um    17um   2.2e-3"  1.1e-5%%
    mu<72     600mm    62mm   6.9mm   820um   100um    0.010"  4.8e-5%%
    mu<74     1.8m    230mm    33mm   4.9mm   750um    0.055"  2.7e-4%%
    mu<76     6.2m    1.1m    200mm    39mm   7.9mm     0.39"  1.8e-3%%
    mu<78      27m    6.3m    1.6m    430mm   .12m       3.7"   0.017%%
    mu<80     160m     55m     20m    7.9m    3.2m        55"    0.28%%
    mu<82     1.5km   870m    520m    330m    210m        35'     7.9%%
    mu<84      27km    28km    37km    53km    81km       19d      39%

Convergence and scale errors using O(ep2^2) and O(ep2) formulas

    set         dgam   dk
x<4e5, y<95e5   3e-8"  4e-7%%
x<5e5, y<96e5   9e-8"  1e-6%%
    mu<10       5e-6"  3e-5%%
    mu<15       4e-5"  2e-4%%
    mu<20       2e-4"  5e-4%%
    mu<25       7e-4"  2e-3%%
    mu<30       3e-3"  3e-3%%
    mu<35       7e-3"  6e-3%%
    mu<40       0.02"  0.02%%
    mu<45       0.05"  0.03%%
    mu<50       0.2"   0.05%%
    mu<55       0.4"   0.1%%
    mu<60       1"     0.3%%
    mu<65       4"     0.6%%
    mu<70       18"    1.5%%
    mu<72       35"    2.4%%
    mu<74       76"    3.9%%
    mu<76       3'     7.1%%
    mu<78       8'     1.4%
    mu<80       28'    3.3%
    mu<82       2.4d   10%
    mu<84       14d    15%
\endverbatim

<center>
Back to \ref intro.  Forward to \ref organization.  Up to \ref contents.
</center>
**********************************************************************/
/**
\page organization Code organization

<center>
Back to \ref example.  Forward to \ref seeds.  Up to \ref contents.
</center>

Text here

<center>
Back to \ref example.  Forward to \ref seeds.  Up to \ref contents.
</center>
**********************************************************************/
/**
\page seeds The seed

<center>
Back to \ref organization.  Forward to \ref integer.  Up to \ref contents.
</center>

Text here

<center>
Back to \ref organization.  Forward to \ref integer.  Up to \ref contents.
</center>
**********************************************************************/
/**
\page integer Random integers

<center>
Back to \ref seeds.  Forward to \ref real.  Up to \ref contents.
</center>

Text here

<center>
Back to \ref seeds.  Forward to \ref real.  Up to \ref contents.
</center>
**********************************************************************/
/**
\page real Random real numbers

<center>
Back to \ref integer.  Forward to \ref other.  Up to \ref contents.
</center>

Text here

\section fixed Fixed-point real numbers

Text here

\section floating Floating-point real numbers

Text here

\section reals Summary of real number routines

<center>
Back to \ref integer.  Forward to \ref other.  Up to \ref contents.
</center>
**********************************************************************/
/**
\page other Other random results

<center>
Back to \ref real.  Forward to \ref otherdist.  Up to \ref contents.
</center>

Text here

<center>
Back to \ref real.  Forward to \ref otherdist.  Up to \ref contents.
</center>
**********************************************************************/
/**
\page otherdist Other random distributions

<center>
Back to \ref other.  Forward to \ref save.  Up to \ref contents.
</center>

Text here

<center>
Back to \ref other.  Forward to \ref save.  Up to \ref contents.
</center>
**********************************************************************/
/**
\page save Saving and restoring the state

<center>
Back to \ref otherdist.  Forward to \ref programming.  Up to \ref contents.
</center>

Text here.

<center>
Back to \ref otherdist.  Forward to \ref programming.  Up to \ref contents.
</center>
**********************************************************************/
/**
\page programming Programming tips

<center>
Back to \ref save.  Forward to \ref parallel.  Up to \ref contents.
</center>

\section conversion Conversion from std::rand()

Text here

\section stl Interaction with the standard template library

Text here

\section misc Miscellaneous

Text here

\section switch Selection of default generator

Text here

\section timing Timing results

Text here

\section checking Checking the engines

Text here.

<center>
Back to \ref save.  Forward to \ref parallel.  Up to \ref contents.
</center>
**********************************************************************/
/**
\page parallel Parallelization

<center>
Back to \ref programming.  Forward to \ref function.  Up to \ref contents.
</center>


\section leapfrog Leapfrogging

Text here.

<center>
Back to \ref programming.  Forward to \ref function.  Up to \ref contents.
</center>
**********************************************************************/
/**
\page function Function index

<center>
Back to \ref parallel.  Forward to \ref old.  Up to \ref contents.
</center>

typedefs and consts
 - Random::seed_type; &nbsp; &nbsp;
   RandomLib::RandomSeed::seed_type

Setting and examining the seed
 - Random g(v); &nbsp; &nbsp;
   RandomLib::RandomEngine::RandomEngine(const std::vector<IntType>&)

Static functions for seed management
 - Random::SeedWord(); &nbsp; &nbsp;
   RandomLib::RandomSeed::SeedWord();

I/O
 - g.Save(os, bin); &nbsp; &nbsp;
   RandomLib::RandomEngine::Save(std::ostream&, bool) const

Functions returning random integers
 - g(); &nbsp; &nbsp;
   RandomLib::RandomEngine::operator()()

Functions returning random reals
 - r.Fixed(); &nbsp; &nbsp;
   RandomLib::RandomCanonical::Fixed()

Functions returning random booleans
 - r.Boolean(); &nbsp; &nbsp;
   RandomLib::RandomCanonical::Boolean()

Function returning random bits
 - r.Bits<n>(); &nbsp; &nbsp;
   RandomLib::RandomCanonical::Bits<nbits>()

Setting position in sequence
 - g.Count(); &nbsp; &nbsp;
   RandomLib::RandomEngine::Count()

Other
 - Random::Global; &nbsp; &nbsp;
   RandomLib::Random::Global

<center>
Back to \ref parallel.  Forward to \ref old.  Up to \ref contents.
</center>
**********************************************************************/
/**
\page old Old versions

<center>
Back to \ref function.  Up to \ref contents.
</center>

Text here.

<center>
Back to \ref function.  Up to \ref contents.
</center>
**********************************************************************/
